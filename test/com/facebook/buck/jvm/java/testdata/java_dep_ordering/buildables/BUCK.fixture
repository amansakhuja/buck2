# Dep graph
#
#    bin     5
#       \   /
#        lib   1
#       /   \ / \
#   test     3   2
#             \ /
#              4
#


# $ buck query 'deps(//buildables:lib)'
# //buildables:lib
# //lib3:lib
# //lib5:lib
# //lib1:lib
# //lib4:lib
# //lib2:lib
#
# 3 -> 5 -> 1 -> 4 -> 2
#
# BFS with children ordered lexicographically

java_library(
    name = "lib",
    deps = [
        "//lib5:lib",
        "//lib3:lib",
    ]
)


# /1-2.txt: 1
# /1-3.txt: 1
# /1-4.txt: 1
# /1-5.txt: 1
# /2-3.txt: 2
# /2-4.txt: 2
# /2-5.txt: 2
# /3-4.txt: 3
# /3-5.txt: 3
# /4-5.txt: 4
#
# Corresponds to lookup order 1 -> 2 -> 3 -> 4 -> 5
#
# Lexicographical order
java_binary(
    name = "bin",
    # Otherwise it puts every file into jar multiple times
    # Is it even possible? yes it is!
    disallow_all_duplicates=True,
    deps = [
        ":lib",
    ]
)

# /1-2.txt: 2
# /1-3.txt: 1
# /1-4.txt: 1
# /1-5.txt: 1
# /2-3.txt: 2
# /2-4.txt: 2
# /2-5.txt: 2
# /3-4.txt: 4
# /3-5.txt: 3
# /4-5.txt: 4
#
# Corresponds to lookup order 2 -> 1 -> 4 -> 3 -> 5
# ?? (maybe) postorder dfs with direct children ordered lexicographically?
java_test(
    name = "test",
    srcs = ["DependencyResolutionTest.java"],
    deps = [
        ':junit',
        ':hamcrest',
        ":lib"
    ]
)

prebuilt_jar(
    name = "junit",
    binary_jar = "junit.jar",
    deps = [
        ":hamcrest",
    ],
)

prebuilt_jar(
    name = "hamcrest",
    binary_jar = "hamcrest.jar",
)

