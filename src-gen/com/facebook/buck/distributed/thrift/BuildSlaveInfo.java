/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-01")
public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, BuildSlaveInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BuildSlaveInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildSlaveInfo");

  private static final org.apache.thrift.protocol.TField RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STD_OUT_CURRENT_BATCH_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("stdOutCurrentBatchNumber", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STD_OUT_CURRENT_BATCH_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("stdOutCurrentBatchLineCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STD_ERR_CURRENT_BATCH_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("stdErrCurrentBatchNumber", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STD_ERR_CURRENT_BATCH_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("stdErrCurrentBatchLineCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LOG_DIR_ZIP_WRITTEN_FIELD_DESC = new org.apache.thrift.protocol.TField("logDirZipWritten", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField EXIT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exitCode", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuildSlaveInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuildSlaveInfoTupleSchemeFactory();

  public RunId runId; // optional
  public java.lang.String hostname; // optional
  public java.lang.String command; // optional
  public int stdOutCurrentBatchNumber; // optional
  public int stdOutCurrentBatchLineCount; // optional
  public int stdErrCurrentBatchNumber; // optional
  public int stdErrCurrentBatchLineCount; // optional
  public boolean logDirZipWritten; // optional
  public int exitCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RUN_ID((short)1, "runId"),
    HOSTNAME((short)2, "hostname"),
    COMMAND((short)3, "command"),
    STD_OUT_CURRENT_BATCH_NUMBER((short)4, "stdOutCurrentBatchNumber"),
    STD_OUT_CURRENT_BATCH_LINE_COUNT((short)5, "stdOutCurrentBatchLineCount"),
    STD_ERR_CURRENT_BATCH_NUMBER((short)6, "stdErrCurrentBatchNumber"),
    STD_ERR_CURRENT_BATCH_LINE_COUNT((short)7, "stdErrCurrentBatchLineCount"),
    LOG_DIR_ZIP_WRITTEN((short)8, "logDirZipWritten"),
    EXIT_CODE((short)9, "exitCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUN_ID
          return RUN_ID;
        case 2: // HOSTNAME
          return HOSTNAME;
        case 3: // COMMAND
          return COMMAND;
        case 4: // STD_OUT_CURRENT_BATCH_NUMBER
          return STD_OUT_CURRENT_BATCH_NUMBER;
        case 5: // STD_OUT_CURRENT_BATCH_LINE_COUNT
          return STD_OUT_CURRENT_BATCH_LINE_COUNT;
        case 6: // STD_ERR_CURRENT_BATCH_NUMBER
          return STD_ERR_CURRENT_BATCH_NUMBER;
        case 7: // STD_ERR_CURRENT_BATCH_LINE_COUNT
          return STD_ERR_CURRENT_BATCH_LINE_COUNT;
        case 8: // LOG_DIR_ZIP_WRITTEN
          return LOG_DIR_ZIP_WRITTEN;
        case 9: // EXIT_CODE
          return EXIT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STDOUTCURRENTBATCHNUMBER_ISSET_ID = 0;
  private static final int __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID = 1;
  private static final int __STDERRCURRENTBATCHNUMBER_ISSET_ID = 2;
  private static final int __STDERRCURRENTBATCHLINECOUNT_ISSET_ID = 3;
  private static final int __LOGDIRZIPWRITTEN_ISSET_ID = 4;
  private static final int __EXITCODE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RUN_ID,_Fields.HOSTNAME,_Fields.COMMAND,_Fields.STD_OUT_CURRENT_BATCH_NUMBER,_Fields.STD_OUT_CURRENT_BATCH_LINE_COUNT,_Fields.STD_ERR_CURRENT_BATCH_NUMBER,_Fields.STD_ERR_CURRENT_BATCH_LINE_COUNT,_Fields.LOG_DIR_ZIP_WRITTEN,_Fields.EXIT_CODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("runId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RunId.class)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STD_OUT_CURRENT_BATCH_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("stdOutCurrentBatchNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STD_OUT_CURRENT_BATCH_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("stdOutCurrentBatchLineCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STD_ERR_CURRENT_BATCH_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("stdErrCurrentBatchNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STD_ERR_CURRENT_BATCH_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("stdErrCurrentBatchLineCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOG_DIR_ZIP_WRITTEN, new org.apache.thrift.meta_data.FieldMetaData("logDirZipWritten", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXIT_CODE, new org.apache.thrift.meta_data.FieldMetaData("exitCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildSlaveInfo.class, metaDataMap);
  }

  public BuildSlaveInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuildSlaveInfo(BuildSlaveInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRunId()) {
      this.runId = new RunId(other.runId);
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    this.stdOutCurrentBatchNumber = other.stdOutCurrentBatchNumber;
    this.stdOutCurrentBatchLineCount = other.stdOutCurrentBatchLineCount;
    this.stdErrCurrentBatchNumber = other.stdErrCurrentBatchNumber;
    this.stdErrCurrentBatchLineCount = other.stdErrCurrentBatchLineCount;
    this.logDirZipWritten = other.logDirZipWritten;
    this.exitCode = other.exitCode;
  }

  public BuildSlaveInfo deepCopy() {
    return new BuildSlaveInfo(this);
  }

  @Override
  public void clear() {
    this.runId = null;
    this.hostname = null;
    this.command = null;
    setStdOutCurrentBatchNumberIsSet(false);
    this.stdOutCurrentBatchNumber = 0;
    setStdOutCurrentBatchLineCountIsSet(false);
    this.stdOutCurrentBatchLineCount = 0;
    setStdErrCurrentBatchNumberIsSet(false);
    this.stdErrCurrentBatchNumber = 0;
    setStdErrCurrentBatchLineCountIsSet(false);
    this.stdErrCurrentBatchLineCount = 0;
    setLogDirZipWrittenIsSet(false);
    this.logDirZipWritten = false;
    setExitCodeIsSet(false);
    this.exitCode = 0;
  }

  public RunId getRunId() {
    return this.runId;
  }

  public BuildSlaveInfo setRunId(RunId runId) {
    this.runId = runId;
    return this;
  }

  public void unsetRunId() {
    this.runId = null;
  }

  /** Returns true if field runId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunId() {
    return this.runId != null;
  }

  public void setRunIdIsSet(boolean value) {
    if (!value) {
      this.runId = null;
    }
  }

  public java.lang.String getHostname() {
    return this.hostname;
  }

  public BuildSlaveInfo setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public java.lang.String getCommand() {
    return this.command;
  }

  public BuildSlaveInfo setCommand(java.lang.String command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public int getStdOutCurrentBatchNumber() {
    return this.stdOutCurrentBatchNumber;
  }

  public BuildSlaveInfo setStdOutCurrentBatchNumber(int stdOutCurrentBatchNumber) {
    this.stdOutCurrentBatchNumber = stdOutCurrentBatchNumber;
    setStdOutCurrentBatchNumberIsSet(true);
    return this;
  }

  public void unsetStdOutCurrentBatchNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID);
  }

  /** Returns true if field stdOutCurrentBatchNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetStdOutCurrentBatchNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID);
  }

  public void setStdOutCurrentBatchNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID, value);
  }

  public int getStdOutCurrentBatchLineCount() {
    return this.stdOutCurrentBatchLineCount;
  }

  public BuildSlaveInfo setStdOutCurrentBatchLineCount(int stdOutCurrentBatchLineCount) {
    this.stdOutCurrentBatchLineCount = stdOutCurrentBatchLineCount;
    setStdOutCurrentBatchLineCountIsSet(true);
    return this;
  }

  public void unsetStdOutCurrentBatchLineCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID);
  }

  /** Returns true if field stdOutCurrentBatchLineCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStdOutCurrentBatchLineCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID);
  }

  public void setStdOutCurrentBatchLineCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID, value);
  }

  public int getStdErrCurrentBatchNumber() {
    return this.stdErrCurrentBatchNumber;
  }

  public BuildSlaveInfo setStdErrCurrentBatchNumber(int stdErrCurrentBatchNumber) {
    this.stdErrCurrentBatchNumber = stdErrCurrentBatchNumber;
    setStdErrCurrentBatchNumberIsSet(true);
    return this;
  }

  public void unsetStdErrCurrentBatchNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID);
  }

  /** Returns true if field stdErrCurrentBatchNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetStdErrCurrentBatchNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID);
  }

  public void setStdErrCurrentBatchNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID, value);
  }

  public int getStdErrCurrentBatchLineCount() {
    return this.stdErrCurrentBatchLineCount;
  }

  public BuildSlaveInfo setStdErrCurrentBatchLineCount(int stdErrCurrentBatchLineCount) {
    this.stdErrCurrentBatchLineCount = stdErrCurrentBatchLineCount;
    setStdErrCurrentBatchLineCountIsSet(true);
    return this;
  }

  public void unsetStdErrCurrentBatchLineCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID);
  }

  /** Returns true if field stdErrCurrentBatchLineCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStdErrCurrentBatchLineCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID);
  }

  public void setStdErrCurrentBatchLineCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID, value);
  }

  public boolean isLogDirZipWritten() {
    return this.logDirZipWritten;
  }

  public BuildSlaveInfo setLogDirZipWritten(boolean logDirZipWritten) {
    this.logDirZipWritten = logDirZipWritten;
    setLogDirZipWrittenIsSet(true);
    return this;
  }

  public void unsetLogDirZipWritten() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGDIRZIPWRITTEN_ISSET_ID);
  }

  /** Returns true if field logDirZipWritten is set (has been assigned a value) and false otherwise */
  public boolean isSetLogDirZipWritten() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGDIRZIPWRITTEN_ISSET_ID);
  }

  public void setLogDirZipWrittenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGDIRZIPWRITTEN_ISSET_ID, value);
  }

  public int getExitCode() {
    return this.exitCode;
  }

  public BuildSlaveInfo setExitCode(int exitCode) {
    this.exitCode = exitCode;
    setExitCodeIsSet(true);
    return this;
  }

  public void unsetExitCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  /** Returns true if field exitCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExitCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  public void setExitCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXITCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RUN_ID:
      if (value == null) {
        unsetRunId();
      } else {
        setRunId((RunId)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((java.lang.String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((java.lang.String)value);
      }
      break;

    case STD_OUT_CURRENT_BATCH_NUMBER:
      if (value == null) {
        unsetStdOutCurrentBatchNumber();
      } else {
        setStdOutCurrentBatchNumber((java.lang.Integer)value);
      }
      break;

    case STD_OUT_CURRENT_BATCH_LINE_COUNT:
      if (value == null) {
        unsetStdOutCurrentBatchLineCount();
      } else {
        setStdOutCurrentBatchLineCount((java.lang.Integer)value);
      }
      break;

    case STD_ERR_CURRENT_BATCH_NUMBER:
      if (value == null) {
        unsetStdErrCurrentBatchNumber();
      } else {
        setStdErrCurrentBatchNumber((java.lang.Integer)value);
      }
      break;

    case STD_ERR_CURRENT_BATCH_LINE_COUNT:
      if (value == null) {
        unsetStdErrCurrentBatchLineCount();
      } else {
        setStdErrCurrentBatchLineCount((java.lang.Integer)value);
      }
      break;

    case LOG_DIR_ZIP_WRITTEN:
      if (value == null) {
        unsetLogDirZipWritten();
      } else {
        setLogDirZipWritten((java.lang.Boolean)value);
      }
      break;

    case EXIT_CODE:
      if (value == null) {
        unsetExitCode();
      } else {
        setExitCode((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RUN_ID:
      return getRunId();

    case HOSTNAME:
      return getHostname();

    case COMMAND:
      return getCommand();

    case STD_OUT_CURRENT_BATCH_NUMBER:
      return getStdOutCurrentBatchNumber();

    case STD_OUT_CURRENT_BATCH_LINE_COUNT:
      return getStdOutCurrentBatchLineCount();

    case STD_ERR_CURRENT_BATCH_NUMBER:
      return getStdErrCurrentBatchNumber();

    case STD_ERR_CURRENT_BATCH_LINE_COUNT:
      return getStdErrCurrentBatchLineCount();

    case LOG_DIR_ZIP_WRITTEN:
      return isLogDirZipWritten();

    case EXIT_CODE:
      return getExitCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RUN_ID:
      return isSetRunId();
    case HOSTNAME:
      return isSetHostname();
    case COMMAND:
      return isSetCommand();
    case STD_OUT_CURRENT_BATCH_NUMBER:
      return isSetStdOutCurrentBatchNumber();
    case STD_OUT_CURRENT_BATCH_LINE_COUNT:
      return isSetStdOutCurrentBatchLineCount();
    case STD_ERR_CURRENT_BATCH_NUMBER:
      return isSetStdErrCurrentBatchNumber();
    case STD_ERR_CURRENT_BATCH_LINE_COUNT:
      return isSetStdErrCurrentBatchLineCount();
    case LOG_DIR_ZIP_WRITTEN:
      return isSetLogDirZipWritten();
    case EXIT_CODE:
      return isSetExitCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuildSlaveInfo)
      return this.equals((BuildSlaveInfo)that);
    return false;
  }

  public boolean equals(BuildSlaveInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_runId = true && this.isSetRunId();
    boolean that_present_runId = true && that.isSetRunId();
    if (this_present_runId || that_present_runId) {
      if (!(this_present_runId && that_present_runId))
        return false;
      if (!this.runId.equals(that.runId))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_stdOutCurrentBatchNumber = true && this.isSetStdOutCurrentBatchNumber();
    boolean that_present_stdOutCurrentBatchNumber = true && that.isSetStdOutCurrentBatchNumber();
    if (this_present_stdOutCurrentBatchNumber || that_present_stdOutCurrentBatchNumber) {
      if (!(this_present_stdOutCurrentBatchNumber && that_present_stdOutCurrentBatchNumber))
        return false;
      if (this.stdOutCurrentBatchNumber != that.stdOutCurrentBatchNumber)
        return false;
    }

    boolean this_present_stdOutCurrentBatchLineCount = true && this.isSetStdOutCurrentBatchLineCount();
    boolean that_present_stdOutCurrentBatchLineCount = true && that.isSetStdOutCurrentBatchLineCount();
    if (this_present_stdOutCurrentBatchLineCount || that_present_stdOutCurrentBatchLineCount) {
      if (!(this_present_stdOutCurrentBatchLineCount && that_present_stdOutCurrentBatchLineCount))
        return false;
      if (this.stdOutCurrentBatchLineCount != that.stdOutCurrentBatchLineCount)
        return false;
    }

    boolean this_present_stdErrCurrentBatchNumber = true && this.isSetStdErrCurrentBatchNumber();
    boolean that_present_stdErrCurrentBatchNumber = true && that.isSetStdErrCurrentBatchNumber();
    if (this_present_stdErrCurrentBatchNumber || that_present_stdErrCurrentBatchNumber) {
      if (!(this_present_stdErrCurrentBatchNumber && that_present_stdErrCurrentBatchNumber))
        return false;
      if (this.stdErrCurrentBatchNumber != that.stdErrCurrentBatchNumber)
        return false;
    }

    boolean this_present_stdErrCurrentBatchLineCount = true && this.isSetStdErrCurrentBatchLineCount();
    boolean that_present_stdErrCurrentBatchLineCount = true && that.isSetStdErrCurrentBatchLineCount();
    if (this_present_stdErrCurrentBatchLineCount || that_present_stdErrCurrentBatchLineCount) {
      if (!(this_present_stdErrCurrentBatchLineCount && that_present_stdErrCurrentBatchLineCount))
        return false;
      if (this.stdErrCurrentBatchLineCount != that.stdErrCurrentBatchLineCount)
        return false;
    }

    boolean this_present_logDirZipWritten = true && this.isSetLogDirZipWritten();
    boolean that_present_logDirZipWritten = true && that.isSetLogDirZipWritten();
    if (this_present_logDirZipWritten || that_present_logDirZipWritten) {
      if (!(this_present_logDirZipWritten && that_present_logDirZipWritten))
        return false;
      if (this.logDirZipWritten != that.logDirZipWritten)
        return false;
    }

    boolean this_present_exitCode = true && this.isSetExitCode();
    boolean that_present_exitCode = true && that.isSetExitCode();
    if (this_present_exitCode || that_present_exitCode) {
      if (!(this_present_exitCode && that_present_exitCode))
        return false;
      if (this.exitCode != that.exitCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRunId()) ? 131071 : 524287);
    if (isSetRunId())
      hashCode = hashCode * 8191 + runId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
    if (isSetCommand())
      hashCode = hashCode * 8191 + command.hashCode();

    hashCode = hashCode * 8191 + ((isSetStdOutCurrentBatchNumber()) ? 131071 : 524287);
    if (isSetStdOutCurrentBatchNumber())
      hashCode = hashCode * 8191 + stdOutCurrentBatchNumber;

    hashCode = hashCode * 8191 + ((isSetStdOutCurrentBatchLineCount()) ? 131071 : 524287);
    if (isSetStdOutCurrentBatchLineCount())
      hashCode = hashCode * 8191 + stdOutCurrentBatchLineCount;

    hashCode = hashCode * 8191 + ((isSetStdErrCurrentBatchNumber()) ? 131071 : 524287);
    if (isSetStdErrCurrentBatchNumber())
      hashCode = hashCode * 8191 + stdErrCurrentBatchNumber;

    hashCode = hashCode * 8191 + ((isSetStdErrCurrentBatchLineCount()) ? 131071 : 524287);
    if (isSetStdErrCurrentBatchLineCount())
      hashCode = hashCode * 8191 + stdErrCurrentBatchLineCount;

    hashCode = hashCode * 8191 + ((isSetLogDirZipWritten()) ? 131071 : 524287);
    if (isSetLogDirZipWritten())
      hashCode = hashCode * 8191 + ((logDirZipWritten) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExitCode()) ? 131071 : 524287);
    if (isSetExitCode())
      hashCode = hashCode * 8191 + exitCode;

    return hashCode;
  }

  @Override
  public int compareTo(BuildSlaveInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRunId()).compareTo(other.isSetRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runId, other.runId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdOutCurrentBatchNumber()).compareTo(other.isSetStdOutCurrentBatchNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdOutCurrentBatchNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdOutCurrentBatchNumber, other.stdOutCurrentBatchNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdOutCurrentBatchLineCount()).compareTo(other.isSetStdOutCurrentBatchLineCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdOutCurrentBatchLineCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdOutCurrentBatchLineCount, other.stdOutCurrentBatchLineCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdErrCurrentBatchNumber()).compareTo(other.isSetStdErrCurrentBatchNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdErrCurrentBatchNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdErrCurrentBatchNumber, other.stdErrCurrentBatchNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdErrCurrentBatchLineCount()).compareTo(other.isSetStdErrCurrentBatchLineCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdErrCurrentBatchLineCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdErrCurrentBatchLineCount, other.stdErrCurrentBatchLineCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogDirZipWritten()).compareTo(other.isSetLogDirZipWritten());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogDirZipWritten()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logDirZipWritten, other.logDirZipWritten);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExitCode()).compareTo(other.isSetExitCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExitCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exitCode, other.exitCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuildSlaveInfo(");
    boolean first = true;

    if (isSetRunId()) {
      sb.append("runId:");
      if (this.runId == null) {
        sb.append("null");
      } else {
        sb.append(this.runId);
      }
      first = false;
    }
    if (isSetHostname()) {
      if (!first) sb.append(", ");
      sb.append("hostname:");
      if (this.hostname == null) {
        sb.append("null");
      } else {
        sb.append(this.hostname);
      }
      first = false;
    }
    if (isSetCommand()) {
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
    }
    if (isSetStdOutCurrentBatchNumber()) {
      if (!first) sb.append(", ");
      sb.append("stdOutCurrentBatchNumber:");
      sb.append(this.stdOutCurrentBatchNumber);
      first = false;
    }
    if (isSetStdOutCurrentBatchLineCount()) {
      if (!first) sb.append(", ");
      sb.append("stdOutCurrentBatchLineCount:");
      sb.append(this.stdOutCurrentBatchLineCount);
      first = false;
    }
    if (isSetStdErrCurrentBatchNumber()) {
      if (!first) sb.append(", ");
      sb.append("stdErrCurrentBatchNumber:");
      sb.append(this.stdErrCurrentBatchNumber);
      first = false;
    }
    if (isSetStdErrCurrentBatchLineCount()) {
      if (!first) sb.append(", ");
      sb.append("stdErrCurrentBatchLineCount:");
      sb.append(this.stdErrCurrentBatchLineCount);
      first = false;
    }
    if (isSetLogDirZipWritten()) {
      if (!first) sb.append(", ");
      sb.append("logDirZipWritten:");
      sb.append(this.logDirZipWritten);
      first = false;
    }
    if (isSetExitCode()) {
      if (!first) sb.append(", ");
      sb.append("exitCode:");
      sb.append(this.exitCode);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (runId != null) {
      runId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuildSlaveInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveInfoStandardScheme getScheme() {
      return new BuildSlaveInfoStandardScheme();
    }
  }

  private static class BuildSlaveInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildSlaveInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildSlaveInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.runId = new RunId();
              struct.runId.read(iprot);
              struct.setRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.command = iprot.readString();
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STD_OUT_CURRENT_BATCH_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stdOutCurrentBatchNumber = iprot.readI32();
              struct.setStdOutCurrentBatchNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STD_OUT_CURRENT_BATCH_LINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stdOutCurrentBatchLineCount = iprot.readI32();
              struct.setStdOutCurrentBatchLineCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STD_ERR_CURRENT_BATCH_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stdErrCurrentBatchNumber = iprot.readI32();
              struct.setStdErrCurrentBatchNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STD_ERR_CURRENT_BATCH_LINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stdErrCurrentBatchLineCount = iprot.readI32();
              struct.setStdErrCurrentBatchLineCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOG_DIR_ZIP_WRITTEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.logDirZipWritten = iprot.readBool();
              struct.setLogDirZipWrittenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXIT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exitCode = iprot.readI32();
              struct.setExitCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildSlaveInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.runId != null) {
        if (struct.isSetRunId()) {
          oprot.writeFieldBegin(RUN_ID_FIELD_DESC);
          struct.runId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostname != null) {
        if (struct.isSetHostname()) {
          oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.hostname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.command != null) {
        if (struct.isSetCommand()) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStdOutCurrentBatchNumber()) {
        oprot.writeFieldBegin(STD_OUT_CURRENT_BATCH_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.stdOutCurrentBatchNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStdOutCurrentBatchLineCount()) {
        oprot.writeFieldBegin(STD_OUT_CURRENT_BATCH_LINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.stdOutCurrentBatchLineCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStdErrCurrentBatchNumber()) {
        oprot.writeFieldBegin(STD_ERR_CURRENT_BATCH_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.stdErrCurrentBatchNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStdErrCurrentBatchLineCount()) {
        oprot.writeFieldBegin(STD_ERR_CURRENT_BATCH_LINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.stdErrCurrentBatchLineCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLogDirZipWritten()) {
        oprot.writeFieldBegin(LOG_DIR_ZIP_WRITTEN_FIELD_DESC);
        oprot.writeBool(struct.logDirZipWritten);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExitCode()) {
        oprot.writeFieldBegin(EXIT_CODE_FIELD_DESC);
        oprot.writeI32(struct.exitCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuildSlaveInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveInfoTupleScheme getScheme() {
      return new BuildSlaveInfoTupleScheme();
    }
  }

  private static class BuildSlaveInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuildSlaveInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuildSlaveInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRunId()) {
        optionals.set(0);
      }
      if (struct.isSetHostname()) {
        optionals.set(1);
      }
      if (struct.isSetCommand()) {
        optionals.set(2);
      }
      if (struct.isSetStdOutCurrentBatchNumber()) {
        optionals.set(3);
      }
      if (struct.isSetStdOutCurrentBatchLineCount()) {
        optionals.set(4);
      }
      if (struct.isSetStdErrCurrentBatchNumber()) {
        optionals.set(5);
      }
      if (struct.isSetStdErrCurrentBatchLineCount()) {
        optionals.set(6);
      }
      if (struct.isSetLogDirZipWritten()) {
        optionals.set(7);
      }
      if (struct.isSetExitCode()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRunId()) {
        struct.runId.write(oprot);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetCommand()) {
        oprot.writeString(struct.command);
      }
      if (struct.isSetStdOutCurrentBatchNumber()) {
        oprot.writeI32(struct.stdOutCurrentBatchNumber);
      }
      if (struct.isSetStdOutCurrentBatchLineCount()) {
        oprot.writeI32(struct.stdOutCurrentBatchLineCount);
      }
      if (struct.isSetStdErrCurrentBatchNumber()) {
        oprot.writeI32(struct.stdErrCurrentBatchNumber);
      }
      if (struct.isSetStdErrCurrentBatchLineCount()) {
        oprot.writeI32(struct.stdErrCurrentBatchLineCount);
      }
      if (struct.isSetLogDirZipWritten()) {
        oprot.writeBool(struct.logDirZipWritten);
      }
      if (struct.isSetExitCode()) {
        oprot.writeI32(struct.exitCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuildSlaveInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.runId = new RunId();
        struct.runId.read(iprot);
        struct.setRunIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.command = iprot.readString();
        struct.setCommandIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stdOutCurrentBatchNumber = iprot.readI32();
        struct.setStdOutCurrentBatchNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stdOutCurrentBatchLineCount = iprot.readI32();
        struct.setStdOutCurrentBatchLineCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stdErrCurrentBatchNumber = iprot.readI32();
        struct.setStdErrCurrentBatchNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stdErrCurrentBatchLineCount = iprot.readI32();
        struct.setStdErrCurrentBatchLineCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.logDirZipWritten = iprot.readBool();
        struct.setLogDirZipWrittenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exitCode = iprot.readI32();
        struct.setExitCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

