/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.artifact_cache.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-12")
public class FetchDebugInfo implements org.apache.thrift.TBase<FetchDebugInfo, FetchDebugInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FetchDebugInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchDebugInfo");

  private static final org.apache.thrift.protocol.TField STORES_LOOKED_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("storesLookedUp", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FASTEST_CACHE_HIT_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("fastestCacheHitStore", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FetchDebugInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FetchDebugInfoTupleSchemeFactory());
  }

  public List<String> storesLookedUp; // optional
  public String fastestCacheHitStore; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORES_LOOKED_UP((short)1, "storesLookedUp"),
    FASTEST_CACHE_HIT_STORE((short)3, "fastestCacheHitStore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORES_LOOKED_UP
          return STORES_LOOKED_UP;
        case 3: // FASTEST_CACHE_HIT_STORE
          return FASTEST_CACHE_HIT_STORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STORES_LOOKED_UP,_Fields.FASTEST_CACHE_HIT_STORE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORES_LOOKED_UP, new org.apache.thrift.meta_data.FieldMetaData("storesLookedUp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FASTEST_CACHE_HIT_STORE, new org.apache.thrift.meta_data.FieldMetaData("fastestCacheHitStore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchDebugInfo.class, metaDataMap);
  }

  public FetchDebugInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchDebugInfo(FetchDebugInfo other) {
    if (other.isSetStoresLookedUp()) {
      List<String> __this__storesLookedUp = new ArrayList<String>(other.storesLookedUp);
      this.storesLookedUp = __this__storesLookedUp;
    }
    if (other.isSetFastestCacheHitStore()) {
      this.fastestCacheHitStore = other.fastestCacheHitStore;
    }
  }

  public FetchDebugInfo deepCopy() {
    return new FetchDebugInfo(this);
  }

  @Override
  public void clear() {
    this.storesLookedUp = null;
    this.fastestCacheHitStore = null;
  }

  public int getStoresLookedUpSize() {
    return (this.storesLookedUp == null) ? 0 : this.storesLookedUp.size();
  }

  public java.util.Iterator<String> getStoresLookedUpIterator() {
    return (this.storesLookedUp == null) ? null : this.storesLookedUp.iterator();
  }

  public void addToStoresLookedUp(String elem) {
    if (this.storesLookedUp == null) {
      this.storesLookedUp = new ArrayList<String>();
    }
    this.storesLookedUp.add(elem);
  }

  public List<String> getStoresLookedUp() {
    return this.storesLookedUp;
  }

  public FetchDebugInfo setStoresLookedUp(List<String> storesLookedUp) {
    this.storesLookedUp = storesLookedUp;
    return this;
  }

  public void unsetStoresLookedUp() {
    this.storesLookedUp = null;
  }

  /** Returns true if field storesLookedUp is set (has been assigned a value) and false otherwise */
  public boolean isSetStoresLookedUp() {
    return this.storesLookedUp != null;
  }

  public void setStoresLookedUpIsSet(boolean value) {
    if (!value) {
      this.storesLookedUp = null;
    }
  }

  public String getFastestCacheHitStore() {
    return this.fastestCacheHitStore;
  }

  public FetchDebugInfo setFastestCacheHitStore(String fastestCacheHitStore) {
    this.fastestCacheHitStore = fastestCacheHitStore;
    return this;
  }

  public void unsetFastestCacheHitStore() {
    this.fastestCacheHitStore = null;
  }

  /** Returns true if field fastestCacheHitStore is set (has been assigned a value) and false otherwise */
  public boolean isSetFastestCacheHitStore() {
    return this.fastestCacheHitStore != null;
  }

  public void setFastestCacheHitStoreIsSet(boolean value) {
    if (!value) {
      this.fastestCacheHitStore = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STORES_LOOKED_UP:
      if (value == null) {
        unsetStoresLookedUp();
      } else {
        setStoresLookedUp((List<String>)value);
      }
      break;

    case FASTEST_CACHE_HIT_STORE:
      if (value == null) {
        unsetFastestCacheHitStore();
      } else {
        setFastestCacheHitStore((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STORES_LOOKED_UP:
      return getStoresLookedUp();

    case FASTEST_CACHE_HIT_STORE:
      return getFastestCacheHitStore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STORES_LOOKED_UP:
      return isSetStoresLookedUp();
    case FASTEST_CACHE_HIT_STORE:
      return isSetFastestCacheHitStore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchDebugInfo)
      return this.equals((FetchDebugInfo)that);
    return false;
  }

  public boolean equals(FetchDebugInfo that) {
    if (that == null)
      return false;

    boolean this_present_storesLookedUp = true && this.isSetStoresLookedUp();
    boolean that_present_storesLookedUp = true && that.isSetStoresLookedUp();
    if (this_present_storesLookedUp || that_present_storesLookedUp) {
      if (!(this_present_storesLookedUp && that_present_storesLookedUp))
        return false;
      if (!this.storesLookedUp.equals(that.storesLookedUp))
        return false;
    }

    boolean this_present_fastestCacheHitStore = true && this.isSetFastestCacheHitStore();
    boolean that_present_fastestCacheHitStore = true && that.isSetFastestCacheHitStore();
    if (this_present_fastestCacheHitStore || that_present_fastestCacheHitStore) {
      if (!(this_present_fastestCacheHitStore && that_present_fastestCacheHitStore))
        return false;
      if (!this.fastestCacheHitStore.equals(that.fastestCacheHitStore))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_storesLookedUp = true && (isSetStoresLookedUp());
    list.add(present_storesLookedUp);
    if (present_storesLookedUp)
      list.add(storesLookedUp);

    boolean present_fastestCacheHitStore = true && (isSetFastestCacheHitStore());
    list.add(present_fastestCacheHitStore);
    if (present_fastestCacheHitStore)
      list.add(fastestCacheHitStore);

    return list.hashCode();
  }

  @Override
  public int compareTo(FetchDebugInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStoresLookedUp()).compareTo(other.isSetStoresLookedUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoresLookedUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storesLookedUp, other.storesLookedUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFastestCacheHitStore()).compareTo(other.isSetFastestCacheHitStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFastestCacheHitStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fastestCacheHitStore, other.fastestCacheHitStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchDebugInfo(");
    boolean first = true;

    if (isSetStoresLookedUp()) {
      sb.append("storesLookedUp:");
      if (this.storesLookedUp == null) {
        sb.append("null");
      } else {
        sb.append(this.storesLookedUp);
      }
      first = false;
    }
    if (isSetFastestCacheHitStore()) {
      if (!first) sb.append(", ");
      sb.append("fastestCacheHitStore:");
      if (this.fastestCacheHitStore == null) {
        sb.append("null");
      } else {
        sb.append(this.fastestCacheHitStore);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchDebugInfoStandardSchemeFactory implements SchemeFactory {
    public FetchDebugInfoStandardScheme getScheme() {
      return new FetchDebugInfoStandardScheme();
    }
  }

  private static class FetchDebugInfoStandardScheme extends StandardScheme<FetchDebugInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchDebugInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORES_LOOKED_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.storesLookedUp = new ArrayList<String>(_list18.size);
                String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.storesLookedUp.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setStoresLookedUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FASTEST_CACHE_HIT_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fastestCacheHitStore = iprot.readString();
              struct.setFastestCacheHitStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FetchDebugInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storesLookedUp != null) {
        if (struct.isSetStoresLookedUp()) {
          oprot.writeFieldBegin(STORES_LOOKED_UP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.storesLookedUp.size()));
            for (String _iter21 : struct.storesLookedUp)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fastestCacheHitStore != null) {
        if (struct.isSetFastestCacheHitStore()) {
          oprot.writeFieldBegin(FASTEST_CACHE_HIT_STORE_FIELD_DESC);
          oprot.writeString(struct.fastestCacheHitStore);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchDebugInfoTupleSchemeFactory implements SchemeFactory {
    public FetchDebugInfoTupleScheme getScheme() {
      return new FetchDebugInfoTupleScheme();
    }
  }

  private static class FetchDebugInfoTupleScheme extends TupleScheme<FetchDebugInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FetchDebugInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStoresLookedUp()) {
        optionals.set(0);
      }
      if (struct.isSetFastestCacheHitStore()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStoresLookedUp()) {
        {
          oprot.writeI32(struct.storesLookedUp.size());
          for (String _iter22 : struct.storesLookedUp)
          {
            oprot.writeString(_iter22);
          }
        }
      }
      if (struct.isSetFastestCacheHitStore()) {
        oprot.writeString(struct.fastestCacheHitStore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FetchDebugInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.storesLookedUp = new ArrayList<String>(_list23.size);
          String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.storesLookedUp.add(_elem24);
          }
        }
        struct.setStoresLookedUpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fastestCacheHitStore = iprot.readString();
        struct.setFastestCacheHitStoreIsSet(true);
      }
    }
  }

}

