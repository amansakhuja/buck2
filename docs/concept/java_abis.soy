{namespace buck.java_abis}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Java  ABIs' /}
    {param navid: 'concept_java_abis' /}
    {param description}
      The different ways of generating ABI jars for Java code.
    {/param}
    {param content}
      <p>This information pertains to building Java code with Buck.</p>

      <p>When compiling a Java rule, in addition to the <b>library JAR</b> that contains all of the
      compiled classes and resources for the rule, Buck also creates an <b>ABI JAR</b> containing
      just the resources and the class interfaces. Since ABI JARs do not contain method bodies
      or private members, they are smaller and change less often than library JARs, which enables
      Buck to do two things with them:
        <ul>
          <li>Use them in {call buck.abi_rule_keys /} to more accurately detect which rules need
          to be rebuilt during an incremental build.</li>
          <li>Use them on the compiler's classpath instead of library JARs to get a small but
          noticeable performance boost since the smaller size of ABI JARs enables the compiler
          to load them faster than library JARs</li>
        </ul>
      </p>
      <h2>Three Kinds of ABI JARs</h2>
      <p>
      Buck has three ways to create an ABI JAR, controlled by the
      {call buckconfig.java_abi_generation_mode /} config setting:
        <ul>
          <li>
            From classes, by building the library JAR first and then stripping out the
            unnecessary bits.
          </li>
          <li>
            From source, by hooking in to the compiler while it is compiling the library JAR and
            emitting the ABI jar partway through. (This helps reduce bottlenecks due to slow
            rules or low parallelism in a build graph.)
          </li>
          <li>
            From source <b>only</b>, by examining just the text of the source code, using
            heuristics to infer things that can normally only be determined from looking at
            dependencies. (This drastically increases parallelism in the rule graph and reduces
            the number of cache fetches required during incremental builds.)
          </li>
        </ul>
      </p>
      <h2>Requirements for Source-only ABI JARs</h2>
      <p>
      Source-only ABI JARs are generated using just the text of the source code for a rule, without
      compiling (most of) that rule's dependencies first. A few details of an ABI JAR cannot be
      known for certain from just the source, so Buck uses heuristics to infer these details. Even
      when using source-only ABIs, Buck must still use a rule's dependencies to compile the library
      JAR. At that time, Buck checks whether the heuristics got the right answer and fails the build
      if not.
      </p>
      <p>
      Such build failures can generally be fixed with {call buck.cmd_fix /}, if sometimes in
      a sub-optimal way. The following describes the requirements for source-only ABI generation,
      how {call buck.cmd_fix /} fixes issues, and what options there are for more optimal
      fixes.
      </p>
      <ul>
        <li>
          <p>
            <b>Annotations and constants in their own rules:</b> All annotations and compile-time
            constants (including enum values) used in the interface
            of a rule must be present during source-only ABI generation.
          </p>
          <p>
            The error will suggest adding <code>required_for_source_abi = True</code> to any rule
            that defines an annotation type or a compile-time constant that is used from another rule,
            and {call buck.cmd_fix /} will make that change. For best results, such rules should be
            manually inspected to ensure they are as small as possible--ideally just containing
            annotations, enums, and constants--and have as few dependencies as possible.
          </p>
        </li>
        <li>
          <p>
            <b>Packages and classes named according to Java convention:</b> Any packages that will
            not be available during source-only ABI generation must have
            names that begin with a lowercase letter. Any top-level classes that will not be available
            must have names that begin with an uppercase letter. (This is extremely common practice in
            Java.)
          </p>
          <p>
            The error will suggest renaming the package or class, and this will have to be done
            manually. ({call buck.cmd_fix /} will not attempt it.) If the
            package or class name in question cannot be changed, add <code>required_for_source_abi = True</code>
            to the build rule that defines it.
          </p>
        </li>
        <li>
          <p>
            <b>Member types referenced canonically:</b> Any references to member types that will
            not be available during source-only ABI generation must be canonical. That is, member types are
            inherited by subclasses; a canonical reference refers to the member type as a member of
            the class in which it is defined, not one that inherits it.
          </p>
          <p>
            If the defining class is accessible, the error will suggest using the canonical name.
            Otherwise, it will suggest adding <code>source_only_abi_deps</code>. {call buck.cmd_fix /}
            will make whichever change is suggested by the error. For best
            results, consider making the defining class accessible so that the extra deps are not
            needed.
          </p>
        </li>
        <li>
          <p>
            <b>Superclass member types referenced unambiguously:</b> Any references to member types that
            are inherited by the current class and will not be available during source-only ABI
            generation must be at least partially qualified.
          </p>
          <p>
            The error will suggest adding an import and partially qualifying the name, and
            {call buck.cmd_fix /} will make the change.
          </p>
        </li>
        <li>
          <p>
            <b>Enough deps for the compiler to run:</b> Source-only ABI generation involves
            running the Java compiler front-end over a rule's code without providing most of
            that rule's dependencies, then working with the compiler's data model to generate
            the ABI. The compiler is remarkably resilient to missing dependencies, but in some cases
            a missing dependency will prevent it from getting far enough for Buck to generate the
            source-only ABI. These cases typically involve inheritance, where a type is available
            during source-only ABI generation, but one of its superclasses is defined in another
            rule that is not available.
          </p>
          <p>
            The error will suggest adding <code>source_only_abi_deps</code> to the rule so that
            the necessary dependencies will be available, and {call buck.cmd_fix /} will make
            the change. For best results, limit the depth of class hierarchies (this is a best
            practice for Java design in many cases as well) and avoid splitting them across
            modules.
          </p>
        </li>
        <li>
          <p>
            <b>Only single-type imports:</b> On-demand imports (star imports) and <code>static</code>
            imports of types cannot be resolved at source-ABI generation time unless the rule
            containing the type in question is available.
          </p>
          <p>
            The error will suggest either adding a single-type import (in the case of star imports)
            or adding <code>source_only_abi_deps</code> in the case of <code>static</code> imports,
            and {call buck.cmd_fix /} will make that change. For best results, consider changing
            <code>static</code> imports of types to non-static imports to avoid needing to
            add the extra dependencies.
          </p>
        </li>
      </ul>
    {/param}
  {/call}
{/template}