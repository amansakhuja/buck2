{namespace buck.buckconfig}

/**
 * @param title
 */
{template .section}
  <h2 id="{$title}">[{$title}]</h2>
  <p>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: '.buckconfig' /}
    {param description}
      An optional file that contains configuration information for Buck.
    {/param}
    {param prettify: true /}
    {param content}
<p>

The root of your project may contain a configuration file
named <code>.buckconfig</code>. If present, Buck will read this file
before executing its business logic so that any customizations specified
in <code>.buckconfig</code> will take effect. This file uses the
{sp}<a href="http://en.wikipedia.org/wiki/INI_file">INI file format</a>.

<p>

The root of your project may also contain a second configuration file
named <code>.buckconfig.local</code>. Its format is exactly the same as
that of <code>.buckconfig</code>, but any definition in <code>.buckconfig.local</code>{sp}
will override that of <code>.buckconfig</code>. In practice, <code>.buckconfig</code> will be a
version-controlled file that contains settings that are applicable to all team members (such as
standard includes for build files), whereas <code>.buckconfig.local</code> will be excluded from
version control because it contains user-specific overrides (such as personal aliases).

<p>

If a configuration option is not found in the project's <code>.buckconfig</code>, it will fall
back to a <code>.buckconfig</code> file and <code>.buckconfig.d</code> directory in your home
directory. Each of those has the same format as a <code>.buckconfig</code> file but will have
any settings overridden by project-specific configurations. If you have build issues, make sure
that there is nothing in your <code>.buckconfig</code> or <code>.buckconfig.d</code> that could
be conflicting with the project you're trying to build.

<p>

The following sections are recognized by Buck:

<p>

{foreach $name in [
    'adb',
    'alias',
    'android',
    'apple',
    'build',
    'buildfile',
    'cache',
    'color',
    'cxx',
    'download',
    'go',
    'halide',
    'java',
    'httpserver',
    'log',
    'maven_repositories',
    'ndk',
    'project',
    'python',
    'rust',
    'test',
    'thrift',
    'tools',
    ]}
  <a href="#{$name}"><code>[{$name}]</code></a><br>
{/foreach}

{call .section}{param title: 'adb' /}{/call}

This section configures adb behavior.

{literal}<pre class="prettyprint lang-ini">
[adb]
  # This specifies a whether to restart adb on failure or not.
  adb_restart_on_failure = true

  # This specifies whether multi-install mode is enabled or
  # disabled by default.
  multi_install_mode = false
</pre>{/literal}


{call .section}{param title: 'alias' /}{/call}

As demonstrated in the <a href="{ROOT}setup/quick_start.html">Quick Start</a>{sp}
instructions, aliases for build targets can be defined in
{sp}<code>.buckconfig</code>:

{literal}<pre class="prettyprint lang-ini">
[alias]
  app     = //apps/myapp:app
  apptest = //apps/myapp:test
</pre>{/literal}

<p>

This facilitates command-line use:

{literal}<pre class="prettyprint">
$ buck build app
$ buck test apptest
</pre>{/literal}

Note that you can also suffix aliases with flavors:

{literal}<pre class="prettyprint">
$ buck build app#src_jar
# This will expand the alias and effectively build the target returned by:
$ buck targets --resolve-alias app#src_jar
//apps/myapp:app#src_jar
</pre>{/literal}

{call .section}{param title: 'android' /}{/call}

Specify the version of the Android SDK that all Android code
in the project should be built against as follows:

{literal}<pre class="prettyprint lang-ini">
[android]
  target = Google Inc.:Google APIs:21
</pre>{/literal}

<p>

If the SDK version is not specified in your <code>.buckconfig</code> file,
the version of the SDK that Buck has chosen will be printed to the console.

<p>

You can find the list of valid values on your system by running{sp}
<code>android list targets --compact</code>.

{call .section}{param title: 'apple' /}{/call}

This section includes settings that control settings that are specific to Apple platform rules.

<p>
  By default, Buck will use the output of <code>xcode-select --print-path</code> to determine where
  Xcode's developer directory is.  However, you can specify a directory in the config to override
  whatever value that would return.
</p>
{literal}<pre class="prettyprint lang-ini">
[apple]
  xcode_developer_dir = path/to/developer/directory
</pre>{/literal}

<p>
  Optionally override the Xcode developer directory for running tests, if you want them to be run
  with a different Xcode version than the version used for building.  If absent, falls back
  to <code>xcode_developer_dir</code> and finally <code>xcode-select --print-path</code>.
</p>
{literal}<pre class="prettyprint lang-ini">
[apple]
  xcode_developer_dir_for_tests = path/to/developer/directory/for_tests
</pre>{/literal}

<p>
  For each platform, you can specify the target SDK version to use.  The format is
  {sp}<code>{lb}platform{rb}_target_sdk_version</code>.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  iphonesimulator_target_sdk_version = 7.0
  iphoneos_target_sdk_version = 7.0
  macosx_target_sdk_version = 10.9
</pre>{/literal}

<p>
  If you want to run tests with Buck, you will need to get
  {sp}<a href="https://github.com/facebook/xctool"><code>xctool</code></a> and tell Buck where to
  find it.  You can specify the path to a binary or a {call buck.build_target /} that will produce a
  zipped version of <code>xctool</code>.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  xctool_path = path/to/binary/of/xctool
  # -or-
  xctool_zip_target = //path/to/target/that/creates:xctool-zip
</pre>{/literal}

<p>
  When running Apple tests via <code>xctool</code>, Buck can set environment variables to
  tell the tests where to write debug logs and what log level to use. By default, Buck
  tells <code>xctool</code> to set two environment variables named <code>FB_LOG_DIRECTORY</code>
  and <code>FB_LOG_LEVEL</code> when running tests which you can read from your test environment:
</p>
{literal}<pre class="prettyprint lang-sh">
  FB_LOG_DIRECTORY=buck-out/gen/path/to/logs
  FB_LOG_LEVEL=debug
</pre>{/literal}
<p>
  You can override the default names for these enviroment variables and the value for
  the debug log level via the following config settings:
</p>
{literal}<pre class="prettyprint lang-init">
  [apple]
    test_log_directory_environment_variable=MY_LOG_DIRECTORY
    test_log_level_environmant_variable=MY_LOG_LEVEL
    test_log_level=verbose
</pre>{/literal}

<p>
  This setting is passed directly to <code>xctool</code>, and then to <code>xcodebuild</code> as
  the <code>-destination</code> argument.  See the
  {sp}<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">
  man page</a> for the proper syntax.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  xctool_default_destination_specifier = platform=iOS Simulator
</pre>{/literal}

<p>
  <code>default_debug_info_format</code> setting controls the default debug info format. If you
  don't specify it, <code>DWARF_AND_DSYM</code> value will be used. You can also disable debug data
  by specifying <code>NONE</code> value.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  default_debug_info_format = DWARF_AND_DSYM
</pre>{/literal}

<p>
  If you want to have Buck be able to install to devices, you need to provide the path to the
  {sp}<a href="https://github.com/samdmarshall/SDMMobileDevice"><code>iOSConsole</code></a> binary.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  device_helper_path = third-party/iOSConsole/iOSConsole
</pre>{/literal}

<p>
  Specifies a path where Buck will look for provisioning profiles (files with extension <code>
  .mobileprovision</code>) that it can use to provision the application to be used on a device.
  You can specify either an absolute path or one relative to the project root.  If unspecified,
  Buck will look in <code>~/Library/MobileDevice/Provisioning Profiles</code>.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  provisioning_profile_search_path = path/to/provisioning/profiles
</pre>{/literal}

<p>
  Xcode projects generated by Buck by default use header maps for header search paths. This speeds
  up builds for large projects over using regular directory header search paths, but breaks some
  Xcode features, like header file name autocompletion. If that is an issue, use the following
  option to disable the use of header maps.
</p>
{literal}<pre class = "prettyprint lang-ini">
[apple]
  use_header_maps_in_xcode = false
</pre>{/literal}

{call .section}{param title: 'build' /}{/call}

This section includes settings that control build engine behavior.

{literal}<pre class="prettyprint lang-ini">
[build]
  # Build engine mode.
  #
  # engine_mode is one of:
  #   deep     : When building a target, ensure that all transitive
  #              dependencies of that target are materialized locally.
  #   shallow  : When building a target, don't require that it's
  #              transitive dependencies are materialized locally.
  #
  # The default is shallow.
  engine_mode = shallow

  # Configures use of dependency files for rules that support them. This
  # is an optimization useful when dependencies are overspecified and the
  # rule can dynamically determine a subset of dependencies it actually
  # needs.  Enabled by default.
  #   disabled : Don't use dependency files for rebuild detection.
  #   enabled  : Use dependency files locally to avoid rebuilds locally.
  #   cache    : Use dependency files locally and to store/fetch artifacts
  #              to/from the cache.
  depfiles = enabled

  # Sets the maximum size of the depfile cache for each input source file,
  # used when setting `depfiles` to `cache` above.  An ideal setting for
  # this should be big enough for the working set of all possible header
  # states that a given unchanged source file uses.
  max_depfile_cache_entries = 256

  # Configures order in which the build engine executes scheduled jobs.
  # Supported values:
  #   LIFO     : Last in, first out. This mode will prefer building all
  #              dependencies of a target before building other targets.
  #              Jobs at different depths in the dependency graph are
  #              likely to be evenly spread throughout the build.
  #   FIFO     : First in, first out. In this mode all jobs will first
  #              check the cache before building their dependencies.
  #              Execution order of jobs is likely to be mostly ordered
  #              by their depth in the dependency graph.
  work_queue_execution_order = LIFO

  # Determines whether dependencies will be scheduled in deterministic
  # or random order.
  # Supported values:
  #   RANDOM   : Randomly shuffle dependencies before scheduling them.
  #              This mode should improve the cache hits if multiple
  #              machines that use the same cache start building the
  #              same target at the same time. It might also help
  #              surface issues with rules depending on side effects
  #              of other rules they don't depend on.
  #   SORTED   : Sort dependencies in stable order before scheduling
  #              them. Note this does not mean that jobs will always
  #              be executed in the same order because that also
  #              depends on the number of running threads and races
  #              between them.
  dependency_scheduling_order = RANDOM
</pre>{/literal}


{call .section}{param title: 'buildfile' /}{/call}

This section may define an <code>includes</code> property that can specify a
path to a file of macros and constants that will automatically be included in
every build file. Therefore, defining the following:

{literal}<pre class="prettyprint lang-ini">
[buildfile]
  includes = //core/DEFS
</pre>{/literal}

is the equivalent of manually invoking <code>include_defs('//core/DEFS')</code>
{sp}at the start of every build file. See
{sp}<a href="{ROOT}function/include_defs.html"><code>include_defs()</code></a>
{sp}for more details.

{call .section}{param title: 'cache' /}{/call}

This section configures build artifact caching, which can be disabled
(default), on the filesystem, or in a distributed cache that can be shared
among developers. Note that the <code>mode</code> property determines which
other properties, if any, are relevant to caching configuration; the irrelevant
properties are ignored. The following example configures Buck to use both
directory-based and http caching.

{literal}<pre class="prettyprint lang-ini">
[cache]
    # Build artifact caching configuration.
    #
    # mode is a comma-separated set of caching mechanisms to use:
    #   dir       : Use a directory-based cache.
    #   http      : Use an http cache.
    #
    # The default set is empty.
    mode = dir, http

    # Directory path used for directory-based caching. The default directory
    # is buck-cache.
    dir = buck-cache

    # The maximum cache size for directory-based caching. The default size
    # is unlimited.
    dir_max_size = 10GB

    # Whether the directory-based cache is readonly or readwrite. The default
    # is readwrite.
    dir_mode = readwrite

    # URL for http cache. The default is http://localhost:8080.
    http_url = http://localhost:8080

    # Whether the http cache is readonly or readwrite. The default is
    # readwrite.
    http_mode = readwrite

    # Timeout for http requests (defaults to 3 seconds).
    http_timeout_seconds = 3

    # The number of writer threads to use to upload to the http cache (defaults to 1)
    # Note: when using multiple http caches (see below) the writer thread pool is shared.
    http_max_concurrent_writes = 2

    # The length of time to wait, after the build has complete, for any remaining
    # http cache uploads to complete before forcefully shutting down the writer thread pool.
    # (Defaults to 1800 seconds == 30 minutes)
    http_writer_shutdown_timeout_seconds = 600

    # Make the directory-based cache available to other hosts on the network via the
    # buck httpserver (which must also be enabled for this to work).
    serve_local_cache = true

    # Whether other hosts on the network are able to write to the directory-based
    # cache (the default is readonly).
    served_local_cache_mode = readwrite
</pre>{/literal}

<p>It is also possible to configure multiple http caches using the syntax below. The caches will be
used <b>serially</b> in the order in which their names are specified in{sp}
<code>http_cache_names</code>. If an artifact is found further along the list an attempt to store
it earlier in the list will be made. In the example below, if the artifact is found in the{sp}
<code>global</code> cache it will be stored in the <code>local</code> cache, but not in the{sp}
<code>regional-ro</code> cache (as that one is not writeable).</p>

{literal}<pre class="prettyprint lang-ini">
[cache]
    mode = http
    http_cache_names = local, regional-ro, global

[cache#regional-ro]
    http_url = http://region.com/
    http_timeout_seconds = 5
    http_mode = readonly

[cache#local]
    http_url = http://local.co.uk/
    http_timeout_seconds = 1

[cache#global]
    http_url = http://global.com/
    http_timeout_seconds = 42
</pre>{/literal}


Buck communicates with the http cache using a
{sp}<a href="{ROOT}concept/http_cache_api.html">simple API</a>.


{call .section}{param title: 'color' /}{/call}

Specify the following to disable colorized output:

{literal}<pre class="prettyprint lang-ini">
[color]
  ui = false
</pre>{/literal}

{call .section}{param title: 'download' /}{/call}
This section configures downloading from the network.


<p>
  By default when fetching remote files from the network Buck will
  try directly connecting. However if you are behind a firewall this
  might not work. So you can specify a proxy to use when downloading
  from http or https servers.
</p>
<p>
  Valid types for proxy_type are HTTP and SOCKS but it defaults to HTTP
  if unset. These values correspond to{sp}
  <a href="http://docs.oracle.com/javase/8/docs/api/java/net/Proxy.Type.html">Java's Proxy.Type</a>
</p>
{literal}<pre class="prettyprint lang-ini">
[download]
    proxy_host=proxy.example.com
    proxy_port=8080
    proxy_type=HTTP
</pre>{/literal}

<p>
  If a remote file's url starts with mvn: it that file (usually a jar)
  is supposed to come from a maven repo. You can specify the repo to
  download from.
</p>
{literal}<pre class="prettyprint lang-ini">
[download]
    maven_repo = https://repo1.maven.org/maven2
</pre>{/literal}

{call .section}{param title: 'cxx' /}{param status: 'UNFROZEN' /}{/call}

This section configures the paths to the C++ toolchain's binaries.

{literal}<pre class="prettyprint lang-ini">
[cxx]
  # Path to the C preprocessor
  cpp = /usr/bin/gcc

  # Path to the C compiler
  cc = /usr/bin/gcc

  # Path to the C/C++ linker driver
  ld = /usr/bin/g++

  # Platform for the linker which is one of {MACOS, LINUX, WINDOWS, UNKNOWN}
  # Note that the platform is normally auto-detected
  linker_platform = MACOS

  # Path to the C++ preprocessor
  cxxpp = /usr/bin/g++

  # Path to the C++ compiler
  cxx = /usr/bin/g++

  # Path to the assembly preprocessor
  aspp = /usr/bin/gcc

  # Path to the assembler
  as = /usr/bin/as

  # Path to the archiver
  ar = /usr/bin/ar

  # Platform for the archiver which is one of {MACOS, LINUX, WINDOWS, UNKNOWN}
  # Note that the platform is normally auto-detected
  archiver_platform = MACOS
</pre>{/literal}

It also configures configures the default flags to pass to all invocations of said binaries.

{literal}<pre class="prettyprint lang-ini">
[cxx]
  # Flags to pass to the C preprocessor
  cppflags =

  # Flags to pass to the C compiler and preprocessor
  cflags =

  # Flags to pass to the C/C++ linker driver
  ldflags =

  # Flags to pass to the C++ preprocessor
  cxxppflags =

  # Flags to pass to the C++ compiler and preprocessor
  cxxflags =

  # Flags to pass to the assembly preprocessor
  asppflags =

  # Flags to pass to the assembler and assembly preprocessor
  asflags =

  # Flags to pass to the archiver
  arflags =

  # Flags to pass to the archive indexer
  ranlibflags =
</pre>{/literal}

Adding a section with header [cxx#<i>flavor</i>] to the .buckconfig will add
an alternate cxx section. This cxx section will be used instead of [cxx]
if the compilation flavor is invoked by appending <i>#flavor</i> to a build
target. So to build with [cxx#example] rather than [cxx] use

<p>

{literal}<pre class="prettyprint">
$ buck build app#example
</pre>{/literal}

{call .section}{param title: 'go' /}{/call}

This section defines the go <code>compiler</code> and <code>linker</code> used by go.

<p>
  By default Buck will try to discovery the Go compiler and linker from the
  {sp}<code>go</code> tool found in your PATH.
</p>

<p>
  If you have a non-standard go install, you will need to set the go root. The root should
  contain <code>pkg</code> and <code>bin</code> directories.
</p>
{literal}<pre class="prettyprint lang-ini">
[go]
  root = /opt/golang/libexec
</pre>{/literal}

<p>
  For interoperability with the go tool, you may specify a prefix for your default package
  names.
</p>
{literal}<pre class="prettyprint lang-ini">
[go]
  prefix = github.com/facebook/buck
</pre>{/literal}

<p>
  You can specify the path to find the <code>go</code> tool.  This in turn will
  allow Buck to discover the compiler/linker by default. This defaults to
  {sp}<code>${lb}go.root{rb}/bin/go</code>.
</p>
{literal}<pre class="prettyprint lang-ini">
[go]
  tool = /usr/local/bin/go
</pre>{/literal}

<p>
  You can also optionally specify the full paths to the Go compiler and linker.
</p>
{literal}<pre class="prettyprint lang-ini">
[go]
  compiler = /usr/local/libexec/go/pkg/tool/darwin_amd64/compile
  linker = /usr/local/libexec/go/pkg/tool/darwin_amd64/link
</pre>{/literal}

{call .section}{param title: 'halide' /}{/call}

<p>
  This section defines the C++ platform flavor to Halide target mapping. Each
  key should begin with the prefix <code>target_</code>, followed by the flavor
  name. The corresponding value should be the Halide target string to use when
  building for that flavor. For example:
</p>
{literal}<pre class="prettyprint lang-ini">
[halide]
  target_iphonesimulator-x86_64 = x86-64-osx
  target_iphoneos-arm64         = arm-64-ios
</pre>{/literal}

<p>
  This section may also include an optional path to a shell script which should
  be used for invoking the Halide AOT "compiler" when building projects that
  include Halide targets in Xcode. For example:
</p>
{literal}<pre class="prettyprint lang-ini">
[halide]
  xcode_compile_script = //path/to/script.sh
</pre>{/literal}

{call .section}{param title: 'java' /}{/call}

This section may define a <code>src_roots</code> property that specifies
file paths to roots of Java code (where a root contains a tree
of Java folders where the folder structure mirrors the package structure).
This list of paths is comma-delimited. Paths that start with a slash are
relative to the root of the project. All other paths can match a folder
anywhere in the tree. For example:
{literal}<pre class="prettyprint lang-ini">
[java]
  src_roots = src, /java/, /javatests/
</pre>{/literal}
Will match the <code>java</code> and <code>javatests</code> folders in the
root of the project, as well as any folder named <code>src</code> in the
project.
<p>
<strong>Note:</strong> This is primarily used as a hack to help determine
where resources from a <code>java_library()</code> should be placed within the
generated JAR file. Hopefully <code>src_roots</code> will be removed at some
point.
<p>
This section may also contain an "extra_arguments" property, which provides
a comma-separated list of options to give to the Java compiler.
<p>
"source_level" and "target_level" specify the version of Java for source files
and generated code, respectively.  Both default to "7".
<p>
Use "skip_checking_missing_deps" to skip analyzing build failure to find missing
dependencies.

{call .section}{param title: 'httpserver' /}{/call}

Option to enable an experimental web server that presents a UI to explore build data.
Note that Buck must be run as a daemon in order for the web server to be available.

<p>
Specifying the port is sufficient to enable the web server:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # The web server will be available at http://localhost:8080/.
  port = 8080
</pre>{/literal}

<p>

If you want Buck to find a free port and use that (i.e., an <em>ephemeral port</em>), then
specify a value of <code>0</code>:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # The web server will be available at http://localhost:XXXX/.
  # Buck will print out the value of XXXX that it chose when the build
  # is complete. This value will be valid so long as the daemon is
  # kept alive.
  #
  # It is common for `port = 0` to be used in a shared .buckconfig file
  # for a project. Then individuals may override this value in
  # .buckconfig.local for each checkout of the repository so that the
  # port is predictable and guaranteed not to overlap with a port from
  # another checkout of the same project.
  port = 0
</pre>{/literal}

<p>

If you want to disable the web server, specify a value of <code>-1</code> for the port:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # This will disable the web server. This often happens when
  # a nonnegative port is specified in .buckconfig, but the user
  # wants to override this behavior in .buckconfig.local.
  port = -1
</pre>{/literal}


{call .section}{param title: 'log' /}{/call}

This section controls how Buck will log information about builds for later
inspection.

{literal}<pre class="prettyprint lang-ini">
[log]
  max_traces = 25
</pre>{/literal}

<p>Will limit Buck to creating, at most, 25{sp}
<a href="{ROOT}about/performance_tuning.html">Chrome Traces</a>.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  compress_traces = true
</pre>{/literal}

<p>Will compress the traces with GZIP.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  remote_log_url = http://all.your.logs:500/are/belong/to/us

</pre>{/literal}

<p>Will stream the build logs to the indicated address. Currently{sp}
<code>http</code> and <code>https</code> scheme URLs are supported.
The events are sent in batches using PUT requests. Each batch contains a
JSON array composing of the long entries.</p>

<p>The format of the individual log entries is not yet finalized and may
change without warning between Buck versions.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  remote_log_sample_rate = 0.1

</pre>{/literal}

<p>Will casue only 10% of Buck invocations to stream logs to <code>remote_log_url</code>.</p>

{call .section}{param title: 'maven_repositories' /}{/call}

This section defines the set of maven repositories that Buck can use
when attempting to resolve maven artifacts. It takes the form of key
value pairs of a short name for the repo and the URL. The URL may
either be an HTTP(S) URL, or point to a directory on your local disk.

{literal}<pre class="prettyprint lang-ini">
[maven_repositories]
  central = https://repo1.maven.org/maven2
  m2 = ~/.m2/repository
</pre>{/literal}

{call .section}{param title: 'ndk' /}{/call}

This section defines properties to configure building native code against
the Android NDK.

This section may define both <code>min_version</code> and{sp}
<code>max_version</code> properties to enable Buck to check before building an{sp}
{call buck.ndk_library /} that the project supports the configured NDK. Both
properties must be specified to enable this check. For example, to support
only versions r7 through r8d:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  min_version = r7
  max_version = r8d
</pre>{/literal}

This section may also define an <code>app_platform</code> which is the android
platform libraries should target.  This is equivalent to{sp}
<code>APP_TARGET</code> in the NDK build system.  This setting defaults to{sp}
<code>android-9</code>.
 {literal}<pre class="prettyprint lang-ini">
[ndk]
  app_platform = android-21
</pre>{/literal}

If your apps only support a subset of the CPU ABIs that Android supports,
you can control which ABIs you target with <code>cpu_abis</code>:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  # Only support ICS and above.
  cpu_abis = armv7, x86
</pre>{/literal}

This section also supports parameters to control how {call buck.cxx_library /} rules
build C/C++ for NDK platforms:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  # The compiler family to use, either "gcc" or "clang".  The default is "gcc".
  compiler = gcc

  # The version of GCC to use from the provided NDK.  This will be used whether
  # "gcc" is selected above or not, as other compiler families still use tools
  # from the "gcc" toolchain (e.g. `ar`).  The default is "4.8".
  gcc_version = 4.8

  # The version of Clang to use from the provided NDK when "clang" is selected
  # above.  The default is "3.4".
  clang_version = 3.4

  # The variant of the C/C++ runtime to use, either "gnustl", "libcxx", "stlport",
  # "gabixx", or "system" (http://www.kandroid.org/ndk/docs/CPLUSPLUS-SUPPORT.html).
  # The default is "gnustl".
  cxx_runtime = gnustl
</pre>{/literal}

{call .section}{param title: 'project' /}{/call}

<code>ide</code> setting defines the IDE for which the project files should be generated.
Sometimes Buck determine the type of IDE (e.g. for {call buck.apple_library /} it will generate Xcode workspace),
but for x-platform types of libraries (like {call buck.cxx_library /}) it is not possible. You may specify the default ide setting here.

{literal}<pre class="prettyprint lang-ini">
[project]
  ide = xcode   # or ide = intellij
</pre>{/literal}


This section may define a <code>default_android_manifest</code> property
to identify the <code>AndroidManifest.xml</code> that should be used when
the <code>src_target</code> of a
{sp}<a href="{ROOT}rule/project_config.html"><code>project_config()</code>
</a> rule is an Android rule (e.g.,
{sp}<a href="{ROOT}rule/android_library.html"><code>android_library()</code>
</a>), but there is no <code>AndroidManifest.xml</code> file in the same
directory as the build file. Because an IDE configuration for an Android
project needs an <code>AndroidManifest.xml</code>, this provides a convenient
fallback, preventing the need to litter your project with boilerplate
{sp}<code>AndroidManifest.xml</code> files.

{literal}<pre class="prettyprint lang-ini">
[project]
  default_android_manifest = //shared/AndroidManifest.xml
</pre>{/literal}

You can define which glob handler Buck will use in this section by setting the
{sp}<code>glob_handler</code> property, which is defined as the text value of the
{sp}<code>ParserConfig.GlobHandler</code> enum.

{literal}<pre class="prettyprint lang-ini">
[project]
  glob_handler = python
</pre>{/literal}

When Buck talks to Watchman, by default each query times out after 1000 ms.
You can change this by setting the
{sp}<code>watchman_query_timeout_ms</code> property, which allows you to set
a shorter or longer timeout for each Watchman query.

{literal}<pre class="prettyprint lang-ini">
[project]
  watchman_query_timeout_ms = 3000
</pre>{/literal}

This section may also define an <code>initial_targets</code> property,
which is a space-delimited list of build targets to run when
{sp}<code>buck project</code> is executed. Frequently, this is a list of
{sp}<code>genrule</code>s whose outputs need to exist in order for an IDE
to be able to build a project natively (i.e., without the help of Buck).
<p>
For example, if you had a <code>genrule()</code> for generating a JAR from
a <a href="http://thrift.apache.org/">Thrift definition file</a>, and you had
a <code>java_library()</code> rule that depended on that JAR, then you would
want to be sure that <code>genrule()</code> was built before importing the
project into IntelliJ because IntelliJ does not know how to build
your <code>genrule()</code> as part of its built-in build process:

{literal}<pre class="prettyprint lang-ini">
[project]
  initial_targets = //java/com/facebook/schema:generate_thrift_jar
</pre>{/literal}

This section may also define an <code>ignore</code> property that specifies a
comma-separated list of subtrees within the project root which are ignored in
the following contexts:
<ul>
  <li>Buck daemon filesystem monitoring
  <li>Filesystem traversal when searching for tests and BUCK files
  <li>IntelliJ project indexing
</ul>
Buck automatically excludes its own output, e.g. <code>buck-out</code>,
{sp}<code>.buckd</code>, and <code>.idea</code>, as well as the cache directory
(see the "dir" setting of the "cache" section), but it makes no assumptions
about source control systems.

{literal}<pre class="prettyprint lang-ini">
[project]
  ignore = .git
</pre>{/literal}

This section may also define a <code>temp_files</code> property that
specifies a comma-separated list of <code>java.util.regex.Pattern</code> regular
expressions which match temporary and backup files which should be ignored by Buck
daemon filesystem monitoring. Setting this property to match any temporary files
created by your IDE or editor will avoid unnecessary cache invalidation when using
the Buck daemon.

{literal}<pre class="prettyprint lang-ini">
[project]
  temp_files = ^#.*#$, .*~$, .*\.swp$
</pre>{/literal}

A <code>post_process</code> property can reference a script that should be
executed after the project files are generated. Because <code>buck project</code> is
currently based on heuristics, the IntelliJ project that it generates may not be
exactly what you want if you are using a non-traditional project structure.
In these cases, you may want to let <code>buck project</code> do the bulk of the
heavy-lifting, and then let your <code>post_process</code> script do some cleanup
on the generated files.

{literal}<pre class="prettyprint lang-ini">
[project]
  post_process = ./scripts/post_process_buck_project.sh
</pre>{/literal}


{call .section}{param title: 'python' /}{/call}

This section may define a settings relevant to <code>python_*</code> rules.

{literal}<pre class="prettyprint lang-ini">
[python]
  # Path to the Python interpreter.
  interpreter = /usr/bin/python

  # The rule (typically a `prebuilt_cxx_library`) wrapping the libpython.so
  # that `cpp_python_extension` rules should build against.
  library = //third-party/python:python

  # Path to the tool used to run executable Python packages.  For self-executing packages,
  # this should just be the shell.
  path_to_pex_executor = /bin/sh

  # The extension to use for executable Python packages.
  pex_extension = .pex

  # The packaging style to use for python binaries and tests:
  #
  #   standalone - Build self-contained executable packages that can be
  #     run outside the repository.  This is the default.
  #
  #   inplace - Generate executables which are only suitable to run from
  #     within the repostory.  This style of package builds significantly
  #     faster than the "standalone" variant.
  #
  package_style = standalone
</pre>{/literal}

Adding a section with header [python#<i>flavor</i>] to the .buckconfig will define
a python platform to build <code>python_*</code> rules against, by using the given
<i>#flavor</i> when building a python binary or test rule.

{literal}<pre class="prettyprint lang-ini">
[python#py2]

  # As in the `python` section, this is the path to the Python interpreter to
  # use with this Python platform.
  interpreter = /usr/bin/python2.7

  # The rule (typically a `prebuilt_cxx_library`) wrapping the libpython.so
  # that `cpp_python_extension` rules should build against when using this
  # Python platform.
  library = //third-party/python:py2.7

[python#py3]
  interpreter = /usr/bin/python3.4
  library = //third-party/python:py3.4
</pre>{/literal}

{call .section}{param title: 'rust' /}{/call}

This section may define a <code>compiler</code> that is used by <code>rust_</code> rules.

{literal}<pre class="prettyprint lang-ini">
[rust]
  # The path to rustc that Buck should use to compile Rust files.
  compiler = /usr/local/bin/rustc
</pre>{/literal}


{call .section}{param title: 'test' /}{/call}

This section may define a <code>timeout</code> for each test that Buck runs.
The value given is in milliseconds.

{literal}<pre class="prettyprint lang-ini">
[test]

  # This specifies a maximum timeout of 5 minutes (300000
  # milliseconds) per test.  A JUnit test can override this
  # via its `@Test` annotation.
  timeout = 300000

  # This specifies a maximum timeout of 20 minutes (1200000
  # milliseconds) per test rule.  This means that all tests
  # within a single test target must complete under 20
  # minutes.  Individual test rules may override this value.
  rule_timeout = 1200000

  # Specify an external test runner command to use instead of Buck's built-in
  # test runner.  The external test runner is invoked by Buck after it has
  # built all the test rules, passing the test runner the path to file which
  # contains a JSON-encoded list of test file infos.  When Buck is invoked via:
  #
  #   $ buck test -- <extra-runner-args>...
  #
  # It will invoke the external runner with:
  #
  #   $ <external-runner> <extra-runner-args>... --buck-test-info <path>
  #
  # The JSON tests file has the following format:
  #
  # [
  #   {
  #
  #     # The build target of the test rule.
  #     "target": "//some:target",
  #
  #     # A string describing the type of the test.
  #     "type": "gtest",
  #
  #     # The command the test runner should invoke
  #     "command": ["buck-out/gen/some/rule/rule"],
  #
  #     # Environment variables which should be defined by the test runner.
  #     "env":  {"VAR": "VALUE"},
  #
  #     # The labels passed into the test rule's definition.
  #     "labels": ["flaky"],
  #
  #     # The contacts passed into the test rule's definition.
  #     "contacts": ["bobloblaw"]
  #
  #   },
  #   ...
  # ]
  #
  # The "type" strings will be one of:
  # - "custom": This describes a test without any structuted output, and which
  #       only uses its return code to signal success or failure.

  external_runner = command args...

</pre>{/literal}

{call .section}{param title: 'thrift' /}{/call}

This section provides settings to locate required thrift components.

{literal}<pre class="prettyprint lang-ini">
[thrift]
  # The thrift compiler (https://thrift.apache.org).  Can be either a path
  # or a build target that builds it.
  compiler = /usr/local/bin/thrift

  # The thrift2 compiler (https://github.com/facebook/fbthrift).  Can be
  # either a path or a build target that builds it.
  #
  # If unset, defaults to the value in compiler, above.
  compiler2 = //thrift2:compiler
</pre>{/literal}

{call .section}{param title: 'tools' /}{/call}
This section tells Buck how to find certain tools.
<p>

The <code>javac</code> option is a path to a program that acts like Java javac.
When set, buck uses this program instead of the system Java compiler.
<p>
The <code>javac_jar</code> option is like <code>javac</code>, except that it points to a JAR
containing a javac-like compiler.
<p>
When <code>javac_jar</code> is set, Buck loads the referenced compiler in-memory.
When neither option is set, Buck defaults to using the system compiler
in-memory.
<p>The <code>proguard-max-heap-size</code> specifies how much memory is used when running proguard.
Defaults to <code>1024M</code>.</p>

    {/param}
  {/call}

{/template}
