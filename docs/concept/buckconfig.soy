{namespace buck.buckconfig}

/**
 * @param title
 */
{template .section}
  <h2 id="{$title}">[{$title}]</h2>
  <p>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: '.buckconfig' /}
    {param description}
      An optional file that contains configuration information for Buck.
    {/param}
    {param prettify: true /}
    {param content}
<p>

The root of your project may contain a configuration file
named <code>.buckconfig</code>. If present, Buck will read this file
before executing its business logic so that any customizations specified
in <code>.buckconfig</code> will take effect. This file uses the
{sp}<a href="http://en.wikipedia.org/wiki/INI_file">INI file format</a>.

<p>

The root of your project may also contain a second configuration file
named <code>.buckconfig.local</code>. Its format is exactly the same as
that of <code>.buckconfig</code>, but any definition in <code>.buckconfig.local</code>{sp}
will override that of <code>.buckconfig</code>. In practice, <code>.buckconfig</code> will be a
version-controlled file that contains settings that are applicable to all team members (such as
standard includes for build files), whereas <code>.buckconfig.local</code> will be excluded from
version control because it contains user-specific overrides (such as personal aliases).

<p>

If a configuration option is not found in the project's <code>.buckconfig</code>, it will fall
back to a <code>.buckconfig</code> file and <code>.buckconfig.d</code> directory in your home
directory. Each of those has the same format as a <code>.buckconfig</code> file but will have
any settings overridden by project-specific configurations. If you have build issues, make sure
that there is nothing in your <code>.buckconfig</code> or <code>.buckconfig.d</code> that could
be conflicting with the project you're trying to build.

<p>

The following sections are recognized by Buck:

<p>

{foreach $name in [
    'adb',
    'alias',
    'android',
    'apple',
    'build',
    'buildfile',
    'cache',
    'color',
    'cxx',
    'download',
    'go',
    'groovy',
    'halide',
    'java',
    'httpserver',
    'log',
    'maven_repositories',
    'ndk',
    'project',
    'python',
    'rust',
    'test',
    'thrift',
    'tools',
    ]}
  <a href="#{$name}"><code>[{$name}]</code></a><br>
{/foreach}

{call buckconfig.section}
  {param name: 'adb' /}
  {param description}
    This section configures adb behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'adb' /}
  {param name: 'adb_restart_on_failure' /}
  {param example_value: 'true' /}
  {param description}
    This specifies whether to restart adb on failure or not.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'adb' /}
  {param name: 'multi_install_mode' /}
  {param example_value: 'false' /}
  {param description}
    This specifies whether multi-install mode is enabled or disabled by default.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'alias' /}
  {param description}
<p>
  This section contains definitions of {call buck.build_target/} aliases.
</p>

{literal}<pre class="prettyprint lang-ini">
[alias]
  app     = //apps/myapp:app
  apptest = //apps/myapp:test
</pre>{/literal}

<p>
  These aliases can then be used from the command line:
</p>

{literal}<pre class="prettyprint">
$ buck build app
$ buck test apptest
</pre>{/literal}

<p>
  You can also suffix aliases with flavors:
</p>

{literal}<pre class="prettyprint">
$ buck build app#src_jar
# This will expand the alias and effectively build the target returned by:
$ buck targets --resolve-alias app#src_jar
//apps/myapp:app#src_jar
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'android' /}
  {param description}
    This section configures android-specific build behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'android' /}
  {param name: 'target' /}
  {param example_value: 'Google Inc.:Google APIs:21' /}
  {param description}
    This specifies the version of the Android SDK that all Android code in the project should be
    built against.  Even if not specified, the version that Buck chose to use will be printed to the
    console during the build.  A list of valid values on your system can be found by running{sp}
    <code>android list targets --compact</code>.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'apple' /}
  {param description}
    This section includes settings that control settings that are specific to Apple platform rules.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xcode_developer_dir' /}
  {param example_value: 'path/to/developer/directory' /}
  {param description}
    By default, Buck will use the output of <code>xcode-select --print-path</code> to determine
    where Xcode's developer directory is.  However, you can specify a directory in the config to
    override whatever value that would return.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xcode_developer_dir_for_tests' /}
  {param example_value: 'path/to/developer/directory/for_tests' /}
  {param description}
    Optionally override the Xcode developer directory for running tests, if you want them to be run
    with a different Xcode version than the version used for building.  If absent, falls back
    to <code>xcode_developer_dir</code> and finally <code>xcode-select --print-path</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'target_sdk_version' /}
  {param description}
    For each platform, you can specify the target SDK version to use.  The format is
    {sp}<code>{lb}platform{rb}_target_sdk_version</code>.
  {/param}
  {param raw_example}
{literal}<pre class = "prettyprint lang-ini">
[apple]
  iphonesimulator_target_sdk_version = 7.0
  iphoneos_target_sdk_version = 7.0
  macosx_target_sdk_version = 10.9
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_path' /}
  {param example_value: 'path/to/binary/of/xctool' /}
  {param description}
    If you want to run tests with Buck, you will need to get
    {sp}<a href="https://github.com/facebook/xctool"><code>xctool</code></a> and tell Buck where to
    find it.  This setting lets you specify a path to a binary.  You should use either this setting
    or {call buckconfig.apple_xctool_zip_target /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_zip_target' /}
  {param example_value: '//path/to/target/that/creates:xctool-zip' /}
  {param description}
    If you want to run tests with Buck, you will need to get
    {sp}<a href="https://github.com/facebook/xctool"><code>xctool</code></a> and tell Buck where to
    find it.  This setting lets you specify a {call buck.build_target /}.  You should use either
    this setting or {call buckconfig.apple_xctool_path /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'test_log' /}
  {param description}
    When running Apple tests via <code>xctool</code>, Buck can set environment variables to
    tell the tests where to write debug logs and what log level to use. By default, Buck
    tells <code>xctool</code> to set two environment variables named <code>FB_LOG_DIRECTORY</code>
    and <code>FB_LOG_LEVEL</code> when running tests which you can read from your test environment:

{literal}<pre class="prettyprint lang-sh">
  FB_LOG_DIRECTORY=buck-out/gen/path/to/logs
  FB_LOG_LEVEL=debug
</pre>{/literal}

    You can override the default names for these environment variables and the value for the debug
    log level via the following config settings:
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-init">
  [apple]
    test_log_directory_environment_variable=MY_LOG_DIRECTORY
    test_log_level_environmant_variable=MY_LOG_LEVEL
    test_log_level=verbose
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_default_destination_specifier' /}
  {param example_value: 'platform=iOS Simulator' /}
  {param description}
    This setting is passed directly to <code>xctool</code>, and then to <code>xcodebuild</code> as
    the <code>-destination</code> argument.  See the
    {sp}<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">
    man page</a> for the proper syntax.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'default_debug_info_format' /}
  {param example_value: 'DWARF_AND_DSYM' /}
  {param description}
    <code>default_debug_info_format</code> setting controls the default debug info format. If you
    don't specify it, <code>DWARF_AND_DSYM</code> value will be used. You can also disable debug
    data by specifying <code>NONE</code> value.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'device_helper_path' /}
  {param example_value: 'third-party/iOSConsole/iOSConsole' /}
  {param description}
    If you want to have Buck be able to install to devices, you need to provide the path to the{sp}
    <a href="https://github.com/samdmarshall/SDMMobileDevice"><code>iOSConsole</code></a> binary.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'provisioning_profile_search_path' /}
  {param example_value: 'path/to/provisioning/profiles' /}
  {param description}
    Specifies a path where Buck will look for provisioning profiles (files with extension <code>
    .mobileprovision</code>) that it can use to provision the application to be used on a device.
    You can specify either an absolute path or one relative to the project root.  If unspecified,
    Buck will look in <code>~/Library/MobileDevice/Provisioning Profiles</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'use_header_maps_in_xcode' /}
  {param example_value: 'false' /}
  {param description}
    Xcode projects generated by Buck by default use header maps for header search paths. This speeds
    up builds for large projects over using regular directory header search paths, but breaks some
    Xcode features, like header file name autocompletion. If that is an issue, use the following
    option to disable the use of header maps.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'build' /}
  {param description}
    This section includes settings that control build engine behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'engine_mode' /}
  {param example_value: 'shallow' /}
  {param description}
    This has two possible values that change the behavior of how Buck operates when building a{sp}
    {call buck.build_target /}:
    <ul>
      <li>
        <code>shallow</code> (default): only the required transitive dependencies of a{sp}
        {call buck.build_target /} are materialized locally.  Cache hits can result in missing
        transitive dependencies that are not needed for the final output.
      </li>
      <li>
        <code>deep</code>: ensure that all transitive dependencies of a {call buck.build_target /}
        {sp}are materialized locally.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'depfiles' /}
  {param example_value: 'enabled' /}
  {param description}
    Configures the use of dependency files for rules that support them.  This is an optimization
    that is useful when dependencies are over-specified and the rule can dynamically determine the
    subset of dependencies it actually needs.  The possible values are:
    <ul>
      <li>
        <code>enabled</code> (default): Use dependency files to avoid unnecessary rebuilds.
      </li>
      <li>
        <code>cache</code>: Use dependency files to avoid unnecessary rebuilds and to store/fetch
        artifacts to/from the cache.
      </li>
      <li>
        <code>disabled</code>: Do not use dependency files for rebuild detection.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'max_depfile_cache_entries' /}
  {param example_value: '256' /}
  {param description}
    Sets the maximum size of the depfile cache for each input source file.  This is only used when
    setting {call buckconfig.build_depfiles /} to <code>cache</code>.  An ideal setting for this
    should be big enough for the working set of all possible header states that a given unchanged
    source file uses.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'work_queue_execution_order' /}
  {param example_value: 'LIFO' /}
  {param description}
    Configures the order in which the build engine executes scheduled jobs.  The supported values
    are:
    <ul>
      <li>
        <code>LIFO</code> (default): Last in, first out.  This mode will prefer building all
        dependencies of a target before build other targets.  Jobs at different depths in the
        dependency graph are likely to be evenly spread throughout the build.
      </li>
      <li>
        <code>FIFO</code>: First in, first out.  In this mode, all jobs will first check the cache
        before building their dependencies.  Execution order of jobs is likely to be mostly ordered
        by their depth in the dependency graph.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'dependency_scheduling_order' /}
  {param example_value: 'RANDOM' /}
  {param description}
    Determines whether dependencies will be scheduled in a deterministic or random order.  The
    supported values are:
    <ul>
      <li>
        <code>RANDOM</code> (default): Randomly shuffle dependencies before scheduling them.  This
        mode should improve the cache hits if multiple machines that use the same cache start
        building the same target at the same time.  It may also help surface issues with rules
        depending on side effects of other rules that they do not depend on.
      </li>
      <li>
        <code>SORTED</code>: First sort dependencies in a stable order before scheduling them.  Note
        that this does not mean that jobs will always be executed in the same order because that
        also depends on the number of running threads and races between them.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'buildfile' /}
  {param description}
    This section includes settings that control build file behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'buildfile' /}
  {param name: 'includes' /}
  {param example_value: '//core/DEFS' /}
  {param description}
    This sets a list of paths to files that will be automatically included by every build file.
    This is equivalent to calling {call buck.fn_include_defs /} in every build file.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'cache' /}
  {param description}
    This section configures build artifact caching, which can be disabled (default), on the
    filesystem, or in a distributed cache that can be shared among developers.  Note that the{sp}
    {call buckconfig.cache_mode /} setting determines which other properties, if any, are relevant
    to the caching configuration; the irrelevant properties are ignored.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'mode' /}
  {param example_value: 'dir, http' /}
  {param description}
    A comma-separated set of caching policies to use.  The valid values are:
    <ul>
      <li>
        <code>dir</code>: Use a directory-based cached on the local filesystem.
      </li>
      <li>
        <code>http</code>: Use an http-based cache.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir' /}
  {param example_value: 'buck-cache' /}
  {param description}
    The directory path relative to the project root that is used for directory-based caching (
    {call buckconfig.cache_mode /} must contain <code>dir</code>).  This defaults to{sp}
    <code>buck-cache</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir_max_size' /}
  {param example_value: '10GB' /}
  {param description}
    The maximum cache size for directory-based caching ({call buckconfig.cache_mode /} must contain
    {sp}<code>dir</code>).  The default size is unlimited.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> or <code>readwrite</code> (default) when using
    directory-based caching ({call buckconfig.cache_mode /} must contain <code>dir</code>).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_url' /}
  {param example_value: 'http://localhost:8080' /}
  {param description}
    The URL to use to contact the cache when using http-based caching{sp}
    ({call buckconfig.cache_mode /} must contain <code>http</code>).  Buck communicates with the
    server using a <a href="{ROOT}concept/http_cache_api.html">simple API</a>.

  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> or <code>readwrite</code> (default) when using
    http-based caching ({call buckconfig.cache_mode /} must contain <code>http</code>).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_read_headers' /}
  {param example_value: 'User-Agent: buck' /}
  {param description}
    A semicolon-separated set of HTTP headers to use when reading from the cache when using
    http-based caching ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default
    is no headers.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_write_headers' /}
  {param example_value: 'Authorization: XXXXXXX; User-Agent: buck' /}
  {param description}
    A semicolon-separated set of HTTP headers to use when writing to the cache when using http-based
    caching ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is no
    headers.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_timeout_seconds' /}
  {param example_value: '3' /}
  {param description}
    Dictates the timeout per connection when using http-based caching{sp}
    ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is <code>3</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_max_concurrent_writes' /}
  {param example_value: '1' /}
  {param description}
    The numver of writer threads to use to upload to the http cache when using http-based caching
    {sp}({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is{sp}
    <code>1</code>.  Note that when using multiple http caches (see below), the writer thread pool
    is shared between them all.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_writer_shutdown_timeout_seconds' /}
  {param example_value: '1800' /}
  {param description}
    The length of time to wait after the build completes for any remaining http cache uploads to
    complete before forecfully shutting down the writer thread pool when using http-based caching
    {sp}({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is{sp}
    <code>1800</code> (30 minutes).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'serve_local_cache' /}
  {param example_value: 'false' /}
  {param description}
    Make the directory-based cache ({call buckconfig.cache_mode /} must contain <code>dir</code>)
    available to other hosts on the network via Buck's HTTP server (enabled under{sp}
    {call buckconfig.httpserver /}).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'served_local_cache_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> or <code>readwrite</code> (default) when{sp}
    {call buckconfig.cache_serve_local_cache /} is enabled.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_cache_names' /}
  {param description}
    A comma-separated list of names used to configure multiple caches.  The caches will be used
    <b>serially</b> in the order in which their names are specified here.  If an artifact is found
    further along in the list, an attempt to store it in the caches earlier in the list will be
    made.  In the following example, if the artifact is found in the <code>global</code> cache, it
    will be stored in the <code>local</code> cache, but not <code>regional-ro</code> cache (as that
    one is <code>readonly</code>.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[cache]
    mode = http
    http_cache_names = local, regional-ro, global

[cache#regional-ro]
    http_url = http://region.com/
    http_timeout_seconds = 5
    http_mode = readonly

[cache#local]
    http_url = http://local.co.uk/
    http_timeout_seconds = 1

[cache#global]
    http_url = http://global.com/
    http_timeout_seconds = 42
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'color' /}
  {param description}
    This section configures colored output of Buck.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'color' /}
  {param name: 'ui' /}
  {param example_value: 'true' /}
  {param description}
    Enables (default) or disables colorized output in the terminal.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'download' /}
  {param description}
    This section configures downloading from the network during {call buck.cmd_fetch /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'download' /}
  {param name: 'proxy' /}
  {param description}
    Buck will attempt to fetch files from the network, however, if you happen to be behind a]
    firewall, this may not work correctly.  You can supply a proxy when downloading from HTTP[S]
    servers with these three settings.  Valid types for <code>proxy_type</code> are{sp}
    <code>HTTP</code> (default) and <code>SOCKS</code>.  These values correspond to {sp}
    <a href="http://docs.oracle.com/javase/8/docs/api/java/net/Proxy.Type.html">Java's
    Proxy.Type</a>.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[download]
    proxy_host=proxy.example.com
    proxy_port=8080
    proxy_type=HTTP
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'download' /}
  {param name: 'maven_repo' /}
  {param example_value: 'https://repo1.maven.org/maven2' /}
  {param description}
    If a remote file's URL starts with <code>mvn:</code>, that file (usually a jar) is supposed to
    come from a maven repo.  You can specify the repo to download from here, or by setting one or
    more repositories in {call buckconfig.maven_repositories /}.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'cxx' /}
  {param description}
    <p>
      This section configures the paths to the C++ and C toolchains' binaries and the default flags
      to pass to all invocations of them.
    </p>

    <p>
      Adding a section with header [cxx#<i>flavor</i>] to the .buckconfig will add
      an alternate cxx section.  This cxx section will be used instead of <code>[cxx]</code>
      if the compilation flavor is invoked by appending <i>#flavor</i> to a{sp}
      {call buck.build_target /}.  On the command line, to build with <code>[cxx#example]</code>{sp}
      rather than <code>[cxx]</code>:
    </p>

    {literal}<pre class="prettyprint">
    $ buck build app#example
    </pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cpp' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the C preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cc' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the C compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ld' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C/C++ linker driver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'linker_platform' /}
  {param example_value: 'MACOS' /}
  {param description}
    The platform for the linker.  Normally this is autodetected based on the system, but it useful
    to set when cross compiling.  Valid values are:
    <ul>
      <li><code>MACOS</code></li>
      <li><code>LINUX</code></li>
      <li><code>WINDOWS</code></li>
      <li><code>UNKNOWN</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxxpp' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C++ preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxx' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C++ compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'aspp' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'as' /}
  {param example_value: '/usr/bin/as' /}
  {param description}
    The path to the assembler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ar' /}
  {param example_value: '/usr/bin/ar' /}
  {param description}
    The path to the archiver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'archiver_platform' /}
  {param example_value: 'MACOS' /}
  {param description}
    The platform for the archiver.  Normally this is autodetected based on the system, but it useful
    to set when cross compiling.  Valid values are:
    <ul>
      <li><code>MACOS</code></li>
      <li><code>LINUX</code></li>
      <li><code>WINDOWS</code></li>
      <li><code>UNKNOWN</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cppflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C compiler and preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ldflags' /}
  {param example_value: '--strip-all' /}
  {param description}
    The flags to pass to the C preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cppxxflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C++ preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxxflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C++ compiler and preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'asppflags' /}
  {param example_value: '-W' /}
  {param description}
    The flags to pass to the assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'csflags' /}
  {param example_value: '-W' /}
  {param description}
    The flags to pass to the assembler and assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'arflags' /}
  {param example_value: '-X32_64' /}
  {param description}
    The flags to pass to the archiver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ranlibflags' /}
  {param example_value: '--plugin someplugin' /}
  {param description}
    The flags to pass to the archive indexer.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'go' /}
  {param description}
    This section defines the Go toolchain.  By default Buck will try to discovery the Go compiler
    and linker from the <code>go</code> tool found in your <code>PATH</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'root' /}
  {param example_value: '/opt/golang/libexec' /}
  {param description}
    If you have a non-standard Go install, you will need to set the Go root.  The root should
    contain <code>pkg</code> and <code>bin</code> directories.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'prefix' /}
  {param example_value: 'github.com/facebook/buck' /}
  {param description}
    For interoperability with the go tool, you may specify a prefix for your default package names.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'tool' /}
  {param example_value: '/usr/local/bin/go' /}
  {param description}
    You can specify the path to find the <code>go</code> tool.  This in turn will allow Buck to
    discover the compiler/linker by default.  This defaults to <code>${lb}go.root{rb}/bin/go</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'compiler' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/compile' /}
  {param description}
    The full path to the Go compiler.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'linker' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/link' /}
  {param description}
    The full path to the Go linker.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'groovy' /}
  {param description}
    This section configures the <a href="http://groovy-lang.org/">Groovy</a> toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'groovy' /}
  {param name: 'groovy_home' /}
  {param example_value: '/path/to/groovy_home'/}
  {param description}
    This defines the value of <code>GROOVY_HOME</code> that Buck should use. If it is not provided,
    Buck will use the system's <code>GROOVY_HOME</code> by default.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'halide' /}
  {param description}
    This section configures the <a href="http://halide-lang.org/">Halide</a> platform mappings and
    toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'halide' /}
  {param name: 'target' /}
  {param description}
    This defines the C++ platform flavor to Halide target mapping.  Each key should begin with the
    prefix <code>target_</code>, followed by the flavor name.  The corresponding value should be the
    Halide target string to use when building for that flavor.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[halide]
  target_iphonesimulator-x86_64 = x86-64-osx
  target_iphoneos-arm64         = arm-64-ios
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'halide' /}
  {param name: 'xcode_compile_script' /}
  {param example_value: '//path/to/script.sh' /}
  {param description}
    The optional path to a shells cript which should be used for invoke the Halid AOT "compiler"
    when building proejcts that include Haldie targets in Xcode.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'java' /}
  {param description}
    This section configures the Java toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'src_roots' /}
  {param example_value: 'src, /java/, /javatests/' /}
  {param description}
    The paths to roots of Java coode (where a root contains a tree of Java folders where the folder
    structure mirrors the package structure).  This list of paths is comma-delimited.  Paths that
    start with a slash are relative to the root of the project, and all other paths can match a
    folder anywhere in the tree.  In the example below, we match all folders named <code>src</code>,
    and <code>java</code> and <code>javatests</code> at the root of the project.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'extra_arguments' /}
  {param example_value: '-g' /}
  {param description}
    A comma-delimited list of flags to pass the Java compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'source_level' /}
  {param example_value: '7' /}
  {param description}
    The default version of Java for source files.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'target_level' /}
  {param example_value: '7' /}
  {param description}
    The default version of Java for generated code.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'skip_checking_missing_deps' /}
  {param example_value: 'false' /}
  {param description}
    Buck will attempt to analyze build failures and suggest dependencies that might not be declared
    in order to fix the failure.  On large projects, this can be slow.  This setting disables the
    check.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'jar_spool_mode' /}
  {param example_value: 'intermediate_to_disk' /}
  {param description}
    Specifies how the compiler output to the <code>.jar</code> file should be spooled.  The valid
    modes are:
    <ul>
      <li>
        <code>intermediate_to_disk</code> (default): writes the intermediate <code>.class</code>{sp}
        files from the compiler output to disk.  They are then packed into a <code>.jar</code>.
      </li>
      <li>
        <code>direct_to_jar</code>: compiler output will be directly written to a <code>.jar</code>
        {sp}file with the intermediate <code>.class</code> files held in memory.  The compiler
        output will still be written to disk if there are any postprocessing commands specified
        during the build.
      </li>
    </ul>
  {/param}
{/call}

{call .section}{param title: 'httpserver' /}{/call}

Option to enable an experimental web server that presents a UI to explore build data.
Note that Buck must be run as a daemon in order for the web server to be available.

<p>
Specifying the port is sufficient to enable the web server:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # The web server will be available at http://localhost:8080/.
  port = 8080
</pre>{/literal}

<p>

If you want Buck to find a free port and use that (i.e., an <em>ephemeral port</em>), then
specify a value of <code>0</code>:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # The web server will be available at http://localhost:XXXX/.
  # Buck will print out the value of XXXX that it chose when the build
  # is complete. This value will be valid so long as the daemon is
  # kept alive.
  #
  # It is common for `port = 0` to be used in a shared .buckconfig file
  # for a project. Then individuals may override this value in
  # .buckconfig.local for each checkout of the repository so that the
  # port is predictable and guaranteed not to overlap with a port from
  # another checkout of the same project.
  port = 0
</pre>{/literal}

<p>

If you want to disable the web server, specify a value of <code>-1</code> for the port:

{literal}<pre class="prettyprint lang-ini">
[httpserver]
  # This will disable the web server. This often happens when
  # a nonnegative port is specified in .buckconfig, but the user
  # wants to override this behavior in .buckconfig.local.
  port = -1
</pre>{/literal}


{call .section}{param title: 'log' /}{/call}

This section controls how Buck will log information about builds for later
inspection.

{literal}<pre class="prettyprint lang-ini">
[log]
  max_traces = 25
</pre>{/literal}

<p>Will limit Buck to creating, at most, 25{sp}
<a href="{ROOT}about/performance_tuning.html">Chrome Traces</a>.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  compress_traces = true
</pre>{/literal}

<p>Will compress the traces with GZIP.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  remote_log_url = http://all.your.logs:500/are/belong/to/us

</pre>{/literal}

<p>Will stream the build logs to the indicated address. Currently{sp}
<code>http</code> and <code>https</code> scheme URLs are supported.
The events are sent in batches using PUT requests. Each batch contains a
JSON array composing of the long entries.</p>

<p>The format of the individual log entries is not yet finalized and may
change without warning between Buck versions.</p>

{literal}<pre class="prettyprint lang-ini">
[log]
  remote_log_sample_rate = 0.1

</pre>{/literal}

<p>Will casue only 10% of Buck invocations to stream logs to <code>remote_log_url</code>.</p>

{call .section}{param title: 'maven_repositories' /}{/call}

This section defines the set of maven repositories that Buck can use
when attempting to resolve maven artifacts. It takes the form of key
value pairs of a short name for the repo and the URL. The URL may
either be an HTTP(S) URL, or point to a directory on your local disk.

{literal}<pre class="prettyprint lang-ini">
[maven_repositories]
  central = https://repo1.maven.org/maven2
  m2 = ~/.m2/repository
</pre>{/literal}

{call .section}{param title: 'ndk' /}{/call}

This section defines properties to configure building native code against
the Android NDK.

This section may define both <code>min_version</code> and{sp}
<code>max_version</code> properties to enable Buck to check before building an{sp}
{call buck.ndk_library /} that the project supports the configured NDK. Both
properties must be specified to enable this check. For example, to support
only versions r7 through r8d:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  min_version = r7
  max_version = r8d
</pre>{/literal}

This section may also define an <code>app_platform</code> which is the android
platform libraries should target.  This is equivalent to{sp}
<code>APP_TARGET</code> in the NDK build system.  This setting defaults to{sp}
<code>android-9</code>.
 {literal}<pre class="prettyprint lang-ini">
[ndk]
  app_platform = android-21
</pre>{/literal}

If your apps only support a subset of the CPU ABIs that Android supports,
you can control which ABIs you target with <code>cpu_abis</code>:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  # Only support ICS and above.
  cpu_abis = armv7, x86
</pre>{/literal}

This section also supports parameters to control how {call buck.cxx_library /} rules
build C/C++ for NDK platforms:
{literal}<pre class="prettyprint lang-ini">
[ndk]
  # The compiler family to use, either "gcc" or "clang".  The default is "gcc".
  compiler = gcc

  # The version of GCC to use from the provided NDK.  This will be used whether
  # "gcc" is selected above or not, as other compiler families still use tools
  # from the "gcc" toolchain (e.g. `ar`).  The default is "4.8".
  gcc_version = 4.8

  # The version of Clang to use from the provided NDK when "clang" is selected
  # above.  The default is "3.4".
  clang_version = 3.4

  # The variant of the C/C++ runtime to use, either "gnustl", "libcxx", "stlport",
  # "gabixx", or "system" (http://www.kandroid.org/ndk/docs/CPLUSPLUS-SUPPORT.html).
  # The default is "gnustl".
  cxx_runtime = gnustl
</pre>{/literal}

{call .section}{param title: 'project' /}{/call}

<code>ide</code> setting defines the IDE for which the project files should be generated.
Sometimes Buck determine the type of IDE (e.g. for {call buck.apple_library /} it will generate Xcode workspace),
but for x-platform types of libraries (like {call buck.cxx_library /}) it is not possible. You may specify the default ide setting here.

{literal}<pre class="prettyprint lang-ini">
[project]
  ide = xcode   # or ide = intellij
</pre>{/literal}


This section may define a <code>default_android_manifest</code> property
to identify the <code>AndroidManifest.xml</code> that should be used when
the <code>src_target</code> of a
{sp}<a href="{ROOT}rule/project_config.html"><code>project_config()</code>
</a> rule is an Android rule (e.g.,
{sp}<a href="{ROOT}rule/android_library.html"><code>android_library()</code>
</a>), but there is no <code>AndroidManifest.xml</code> file in the same
directory as the build file. Because an IDE configuration for an Android
project needs an <code>AndroidManifest.xml</code>, this provides a convenient
fallback, preventing the need to litter your project with boilerplate
{sp}<code>AndroidManifest.xml</code> files.

{literal}<pre class="prettyprint lang-ini">
[project]
  default_android_manifest = //shared/AndroidManifest.xml
</pre>{/literal}

You can define which glob handler Buck will use in this section by setting the
{sp}<code>glob_handler</code> property, which is defined as the text value of the
{sp}<code>ParserConfig.GlobHandler</code> enum.

{literal}<pre class="prettyprint lang-ini">
[project]
  glob_handler = python
</pre>{/literal}

When Buck talks to Watchman, by default each query times out after 1000 ms.
You can change this by setting the
{sp}<code>watchman_query_timeout_ms</code> property, which allows you to set
a shorter or longer timeout for each Watchman query.

{literal}<pre class="prettyprint lang-ini">
[project]
  watchman_query_timeout_ms = 3000
</pre>{/literal}

This section may also define an <code>initial_targets</code> property,
which is a space-delimited list of build targets to run when
{sp}<code>buck project</code> is executed. Frequently, this is a list of
{sp}<code>genrule</code>s whose outputs need to exist in order for an IDE
to be able to build a project natively (i.e., without the help of Buck).
<p>
For example, if you had a <code>genrule()</code> for generating a JAR from
a <a href="http://thrift.apache.org/">Thrift definition file</a>, and you had
a <code>java_library()</code> rule that depended on that JAR, then you would
want to be sure that <code>genrule()</code> was built before importing the
project into IntelliJ because IntelliJ does not know how to build
your <code>genrule()</code> as part of its built-in build process:

{literal}<pre class="prettyprint lang-ini">
[project]
  initial_targets = //java/com/facebook/schema:generate_thrift_jar
</pre>{/literal}

This section may also define an <code>ignore</code> property that specifies a
comma-separated list of subtrees within the project root which are ignored in
the following contexts:
<ul>
  <li>Buck daemon filesystem monitoring
  <li>Filesystem traversal when searching for tests and BUCK files
  <li>IntelliJ project indexing
</ul>
Buck automatically excludes its own output, e.g. <code>buck-out</code>,
{sp}<code>.buckd</code>, and <code>.idea</code>, as well as the cache directory
(see the "dir" setting of the "cache" section), but it makes no assumptions
about source control systems.

{literal}<pre class="prettyprint lang-ini">
[project]
  ignore = .git
</pre>{/literal}

This section may also define a <code>temp_files</code> property that
specifies a comma-separated list of <code>java.util.regex.Pattern</code> regular
expressions which match temporary and backup files which should be ignored by Buck
daemon filesystem monitoring. Setting this property to match any temporary files
created by your IDE or editor will avoid unnecessary cache invalidation when using
the Buck daemon.

{literal}<pre class="prettyprint lang-ini">
[project]
  temp_files = ^#.*#$, .*~$, .*\.swp$
</pre>{/literal}

A <code>post_process</code> property can reference a script that should be
executed after the project files are generated. Because <code>buck project</code> is
currently based on heuristics, the IntelliJ project that it generates may not be
exactly what you want if you are using a non-traditional project structure.
In these cases, you may want to let <code>buck project</code> do the bulk of the
heavy-lifting, and then let your <code>post_process</code> script do some cleanup
on the generated files.

{literal}<pre class="prettyprint lang-ini">
[project]
  post_process = ./scripts/post_process_buck_project.sh
</pre>{/literal}

<p>
  Buck can parse your {call buck.build_file /}s in parallel when setting
  {sp}<code>parallel_parsing</code> to <code>true</code>.  By default, this is set to
  {sp}<code>false</code>.
</p>

{literal}<pre class="prettyprint lang-ini">
[project]
  parallel_parsing = false
</pre>{/literal}

<p>
  When <code>parallel_parsing</code> is enabled, the number of threads Buck uses to parse is
  controlled by the <code>parsing_threads</code> setting.  By default, this is equal to the number
  of threads Buck uses to build, and will be the minimum of this setting and
  {sp}<code>build.threads</code>.
</p>

{literal}<pre class="prettyprint lang-ini">
[project]
  parsing_threads = 2
</pre>{/literal}

{call .section}{param title: 'python' /}{/call}

This section may define a settings relevant to <code>python_*</code> rules.

{literal}<pre class="prettyprint lang-ini">
[python]
  # Path to the Python interpreter.
  interpreter = /usr/bin/python

  # The rule (typically a `prebuilt_cxx_library`) wrapping the libpython.so
  # that `cpp_python_extension` rules should build against.
  library = //third-party/python:python

  # Path to the tool used to run executable Python packages.  For self-executing packages,
  # this should just be the shell.
  path_to_pex_executor = /bin/sh

  # The extension to use for executable Python packages.
  pex_extension = .pex

  # The packaging style to use for python binaries and tests:
  #
  #   standalone - Build self-contained executable packages that can be
  #     run outside the repository.  This is the default.
  #
  #   inplace - Generate executables which are only suitable to run from
  #     within the repostory.  This style of package builds significantly
  #     faster than the "standalone" variant.
  #
  package_style = standalone

  # The strategy used for pulling in native dependencies.
  #
  #   separate - Transitive native deps are linked as full, separate shared libraries.
  #     Preferred for build-time speed.
  #
  #   merged - Native deps which have explicit deps from python rules are linked as
  #     full, separate shared libraries.  Transitive native deps which do *not* have
  #     explicit deps from python rules are statically linked into a single monolithic
  #     shared library.  Preferred to reduce native code size and shared library count.
  #
  native_link_strategy = separate
</pre>{/literal}

Adding a section with header [python#<i>flavor</i>] to the .buckconfig will define
a python platform to build <code>python_*</code> rules against, by using the given
<i>#flavor</i> when building a python binary or test rule.

{literal}<pre class="prettyprint lang-ini">
[python#py2]

  # As in the `python` section, this is the path to the Python interpreter to
  # use with this Python platform.
  interpreter = /usr/bin/python2.7

  # The rule (typically a `prebuilt_cxx_library`) wrapping the libpython.so
  # that `cpp_python_extension` rules should build against when using this
  # Python platform.
  library = //third-party/python:py2.7

[python#py3]
  interpreter = /usr/bin/python3.4
  library = //third-party/python:py3.4
</pre>{/literal}

{call .section}{param title: 'rust' /}{/call}

This section may define a <code>compiler</code> that is used by <code>rust_</code> rules.

{literal}<pre class="prettyprint lang-ini">
[rust]
  # The path to rustc that Buck should use to compile Rust files.
  compiler = /usr/local/bin/rustc
</pre>{/literal}


{call .section}{param title: 'test' /}{/call}

This section may define a <code>timeout</code> for each test that Buck runs.
The value given is in milliseconds.

{literal}<pre class="prettyprint lang-ini">
[test]

  # This specifies a maximum timeout of 5 minutes (300000
  # milliseconds) per test.  A JUnit test can override this
  # via its `@Test` annotation.
  timeout = 300000

  # This specifies a maximum timeout of 20 minutes (1200000
  # milliseconds) per test rule.  This means that all tests
  # within a single test target must complete under 20
  # minutes.  Individual test rules may override this value.
  rule_timeout = 1200000

  # Specify an external test runner command to use instead of Buck's built-in
  # test runner.  The external test runner is invoked by Buck after it has
  # built all the test rules, passing the test runner the path to file which
  # contains a JSON-encoded list of test file infos.  When Buck is invoked via:
  #
  #   $ buck test -- <extra-runner-args>...
  #
  # It will invoke the external runner with:
  #
  #   $ <external-runner> <extra-runner-args>... --buck-test-info <path>
  #
  # The JSON tests file has the following format:
  #
  # [
  #   {
  #
  #     # The build target of the test rule.
  #     "target": "//some:target",
  #
  #     # A string describing the type of the test.
  #     "type": "gtest",
  #
  #     # The command the test runner should invoke
  #     "command": ["buck-out/gen/some/rule/rule"],
  #
  #     # Environment variables which should be defined by the test runner.
  #     "env":  {"VAR": "VALUE"},
  #
  #     # The labels passed into the test rule's definition.
  #     "labels": ["flaky"],
  #
  #     # The contacts passed into the test rule's definition.
  #     "contacts": ["bobloblaw"]
  #
  #   },
  #   ...
  # ]
  #
  # The "type" strings will be one of:
  # - "custom": This describes a test without any structuted output, and which
  #       only uses its return code to signal success or failure.

  external_runner = command args...

</pre>{/literal}

{call .section}{param title: 'thrift' /}{/call}

This section provides settings to locate required thrift components.

{literal}<pre class="prettyprint lang-ini">
[thrift]
  # The thrift compiler (https://thrift.apache.org).  Can be either a path
  # or a build target that builds it.
  compiler = /usr/local/bin/thrift

  # The thrift2 compiler (https://github.com/facebook/fbthrift).  Can be
  # either a path or a build target that builds it.
  #
  # If unset, defaults to the value in compiler, above.
  compiler2 = //thrift2:compiler
</pre>{/literal}

{call .section}{param title: 'tools' /}{/call}
This section tells Buck how to find certain tools.
<p>

The <code>javac</code> option is a path to a program that acts like Java javac.
When set, buck uses this program instead of the system Java compiler.
<p>
The <code>javac_jar</code> option is like <code>javac</code>, except that it points to a JAR
containing a javac-like compiler.
<p>
When <code>javac_jar</code> is set, Buck loads the referenced compiler in-memory.
When neither option is set, Buck defaults to using the system compiler
in-memory.
<p>The <code>proguard-max-heap-size</code> specifies how much memory is used when running proguard.
Defaults to <code>1024M</code>.</p>

    {/param}
  {/call}

{/template}
