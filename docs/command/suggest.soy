/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.suggest}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck suggest' /}
    {param navid: 'command_suggest' /}
    {param prettify: true /}
    {param description}

    {/param}
    {param content}

{call buck.command}
{param overview}
<p>
The purpose of this command is to help you break down a large build rule into more fine-grained
build rules. Currently, it only works with {call buck.java_library /} rules.
</p>

<p>
To use it, run:
</p>

{literal}<pre>
buck suggest //build/target/to:partition
</pre>{/literal}

<p>
Assuming this corresponds to a rule with the following definition:

{literal}<pre class="prettyprint lang-python">
java_library(
  name = 'partition',
  srcs = [
    # These four sources are in a diamond dependency.
    'Alpha.java',
    'Bravo.java',
    'Charlie.java',
    'Delta.java',
  ],
  visibility = [
    'PUBLIC',
  ],
)
</pre>{/literal}

<p>
Then <code>buck suggest</code> would print the following to standard out:
</p>

{literal}<pre class="prettyprint lang-python">
java_library(
  name = 'partition',
  exported_deps = [
    ':partition.Alpha',
    ':partition.Bravo',
    ':partition.Charlie',
    ':partition.Delta',
  ],
  visibility = [
    'PUBLIC',
  ],
)

java_library(
  name = 'partition.Alpha',
  srcs = [
    'Alpha.java',
  ],
  deps = [
    ':partition.Bravo',
    ':partition.Charlie',
  ],
  visibility = [
    'PUBLIC',
  ],
)

java_library(
  name = 'partition.Bravo',
  srcs = [
    'Bravo.java',
  ],
  deps = [
    ':partition.Delta',
  ],
  visibility = [
    'PUBLIC',
  ],
)

java_library(
  name = 'partition.Charlie',
  srcs = [
    'Charlie.java',
  ],
  deps = [
    ':partition.Delta',
  ],
  visibility = [
    'PUBLIC',
  ],
)

java_library(
  name = 'partition.Delta',
  srcs = [
    'Delta.java',
  ],
  deps = [
  ],
  visibility = [
    'PUBLIC',
  ],
)
</pre>{/literal}

<p>
In this particular case, the output from <code>buck suggest</code> could be used verbatim to replace
the contents of the original <code>BUCK</code> file. However, the more common thing to do is to
take the output and massage it into a level of granularity that is appropriate for your project.
</p>

{/param} // overview
{/call} // buck.command

    {/param}  // content
  {/call} // buck.page
{/template}
