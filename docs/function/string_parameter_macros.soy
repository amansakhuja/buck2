{namespace buck.string_parameter_macros}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'String Parameter Macros' /}
    {param navid: 'function_string_parameter_macros' /}
    {param prettify: true /}
    {param description}
      Parameter macros provide more expressive power to a rule's string parameters.
    {/param}
    {param content}

{call buck.function}
{param status: 'UNFROZEN' /}
{param overview}
Some rules allow the use of specialized macros embedded within the strings
of their parameters, providing additional functionality such as referencing
the output paths of other rules.

String parameter macros have the form <code>$(macro[ argument])</code>.
For rules that support string parameter macros, you can use a backslash at
any time to prevent expansion (e.g. <code>\$(dirname ...)</code>).

The following macros are supported:
{literal}
<ul>
  <li><code>$(classpath //:foo)</code> expands to the set of jars that are in the classpath of the given target</li>
  <li><code>$(classpath_abi //:foo)</code> expands to the set of class abi jars that are in the classpath of the given target</li>
  <li><code>$(exe //:foo)</code> expands to the executable output of given target if it exists</li>
  <li><code>$(location //:foo)</code> expands to the output file or directory of the given target</li>
  <li><code>$(location //:foo[output])</code> expands to the named output file or directory of the given target, for rules that expose supplementary outputs.</li>
  <li><code>$(maven_coords //:foo)</code> expands to the maven coordinates associated with the given target</li>
  <li><code>$(output name)</code> expands to the path of the named output of the rule the macro is used in. Only useful for rules which allows named supplementary outputs.</li>
  <li><code>$(query_targets "deps(//:foo)")</code> executes the given query and expands to the list of targets that match. See more information below.</li>
  <li><code>$(query_outputs "deps(//:foo)")</code> executes the given query and expands to the output files of the list of targets that match. See more information below.</li>
  <li><code>$(query_targets_and_outputs [SEPARATOR] "deps(//:foo)")</code> executes the given query and expands to the target name and the output files of the list of targets that match. Targets and paths are separated by SEPARATOR if provided, or a space if it is not.</li>
</ul>
{/literal}
{/param}

{param args}

{call buck.functionArg}
  {param desc}
  String parameter macros may take a space separated list of arguments.
  {/param}
{/call}

{/param}

{param examples}

The following example uses a string parameter macro in a <code>genrule()</code>{sp}
to copy the output of another rule:
{literal}<pre class="prettyprint lang-py">
genrule(
  name = 'gen',
  out = 'out.txt',
  cmd = 'cp $(location //some/other:rule) $OUT',
)
</pre>{/literal}

The following example uses a backslash to prevent macro expansion, and hand
the <code>dirname</code> subshell command directly to the shell:
{literal}<pre class="prettyprint lang-py">
genrule(
  name = 'gen',
  out = 'out.txt',
  cmd = 'cp $SRCS \$(dirname $OUT)',
  srcs = [
    'test1.txt',
    'test2.txt',
  ],
)
</pre>{/literal}

The query_* macros accepts a quoted query expression which supports the following query functions:
{literal}
<ul style="line-height:0.5em">
  <li><code>attrfilter</code></li>
  <li><code>deps</code></li>
  <li><code>except</code></li>
  <li><code>classpath</code></li>
  <li><code>intersect</code></li>
  <li><code>filter</code></li>
  <li><code>kind</code></li>
  <li><code>set</code></li>
  <li><code>union</code></li>
</ul>
{/literal}

The <code>classpath</code> function is used to query the classpath of <code>java_library</code>
rules. It takes an optional second argument to limit the depth of the traversal.

Example queries
{literal}
<pre class="prettyprint lang-py">
cmd = '$(query_targets "deps(:foo)")'
cmd = '$(query_outputs "filter(name_regex, deps(:bar))")'
cmd = '$(query_targets "attrfilter(annotation_processors, com.foo.Processor, deps(:app))")'
</pre>
{/literal}

{/param}

{param furtherexp}
<h2>Technical Details</h2>

The EBNF grammar for a macro is as follows:
{literal}<pre>
macro = "$(", macro_name, whitespace, [arg_list], ")";
macro_name = {all_ascii_chars - whitespace - parens};
whitespace = "\t" | "\n" | " " | "\r";
parens = "(" | ")";
arg_list = arg | arg, whitespace, arg_list;
arg = {all_ascii_chars - whitespace - parens}
      | "(", arg, ")"
      | "\"", [{-"\""}], "\""
      | "'", [{-"'"}], "'";
</pre>{/literal}


<h3>FAQs</h3>
<ul>
  <li> <strong>When are macros evaluated?</strong> Macros are evaluated before the command is passed to the shell for execution. You can think of them as simple string replacements. </li>
  <li> <strong>Can macros be nested?</strong> Macros cannot be nested. If you need to run a second macro on the output of another macro, create a nested <code>genrule</code> definition and use the <code>$(location)</code> macro
  to read the output of the first one. </li>
  <li> <strong>Are parens okay inside a macro?</strong> Inside a macro, parentheses must be balanced. Parentheses which are part of a quoted string are ignored. </li>
  <li> <strong>Is whitespace okay inside a macro?</strong> Macro args are whitespace separated, so args which contain whitespace must be quoted.</li>
  <li> <strong>Are nested quotes allowed?</strong> A single level of nested quotes is allowed (e.g. <code>"My name is 'Buck'." or 'My name is "Buck".'</code>). Note that when you use the macro
  in a BUCK file, you must ensure that these quotes are properly escaped, so that the command which uses the macro forms a proper string. </li>
</ul>

<p>
{/param}

{/call} // buck.function
    {/param} // content
  {/call}
{/template}
