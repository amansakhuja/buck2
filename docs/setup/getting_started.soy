{namespace buck.getting_started}

/***/
{template .soyweb}

{call buck.header}
  {param title: 'Getting Started' /}
  {param navid: 'setup_getting_started' /}
  {param description}
    How to setup your project to use Buck.
  {/param}
{/call}

<div class="{css overview}">

<div class="toggler">
  <table>
  <tr>
  <td><span><strong>Mobile OS:</strong></span></td>
  <td>
  <a href="javascript:void(0);" class="button-ios" onclick="display('platform', 'ios')">iOS</a>
  <a href="javascript:void(0);" class="button-android" onclick="display('platform', 'android')">Android</a>
  </td>
  </tr>
  <tr>
  <td><span><strong>Development OS:</strong></span></td>
  <td>
  <a href="javascript:void(0);" class="button-mac" onclick="display('os', 'mac')">macOS</a>
  <a href="javascript:void(0);" class="button-linux" onclick="display('os', 'linux')">Linux</a>
  <a href="javascript:void(0);" class="button-windows" onclick="display('os', 'windows')">Windows</a>
  </td>
  </tr>
  </table>
</div>

<span><block class="linux windows ios" /></span>

<p>Unfortunately, Apple only lets you develop for iOS on a Mac.</p>

<span><block class="mac ios" /></span>
<p>
  This is a quick start guide for getting up and running with Buck. This article is light on details, instead focusing on the commands that you need to run to install Buck.
</p>

<span><block class="windows android" /></span>
<p>
  This is a quick start guide for getting up and running with Buck. This article is light on details, instead focusing on the commands that you need to run to install Buck.
</p>

<span><block class="linux mac android" /></span>
<p>
  This is a quick start guide for getting up and running with Buck. This article is light on details, instead focusing on the commands that you need to run to install Buck and build your first application from scratch using Buck.
</p>

<span><block class="mac ios android" /></span>

<p>
  You can find a more detailed explanation about each step in the development process by reading the individual articles on more specific topics.
</p>

<p>
<blockquote>
  The commands in this guide are designed to be copy-pasteable, idempotent, and usable on its representative platform (OS X, Windows, Linux). Sometimes this results in some unusual constructions (such as using <code>echo</code> instead of <code>vi</code> or <code>emacs</code> to create a file). Bear in mind that this is a <em>quick</em> start guide, so few things are quicker than copy-and-paste!
</blockquote>
</p>

<span><block class="windows linux android" /></span>

<p>
You can find a more detailed explanation about each step in the development process by reading the individual articles on more specific topics.
</p>

<p>
<blockquote>
  The commands in this guide are designed to be copy-pasteable, idempotent, and usable on its representative platform (OS X, Windows, Linux). Sometimes this results in some unusual constructions (such as using <code>echo</code> instead of <code>vi</code> or <code>emacs</code> to create a file). Bear in mind that this is a <em>quick</em> start guide, so few things are quicker than copy-and-paste!
</blockquote>
</p>

<span><block class="linux windows android" /></span>
<p>
<blockquote>
  Currently, there is no way to download a precompiled binary for Buck.
</blockquote>
</p>

<span><block class="mac ios android" /></span>

<h2>Install with Homebrew</h2>

<p>
  Buck is available as bottle on <a href="http://brew.sh/">Homebrew</a>.
</p>

<h3>Prerequisites</h3>

<ul>
  <li>
    <a href="https://developer.apple.com/xcode/features/">Command Line Tools</a>
  </li>
</ul>

{literal}<pre>
# Install command line tools
xcode-select --install
</pre>{/literal}
<h3>Brew install</h3>

<p>
  You have two choices when using Homebrew.  You can choose to get the latest binary <a href="https://github.com/facebook/buck/releases/latest">release</a>, for which you will need a <a href="https://java.com/en/download/">Java Runtime Environment</a>:
</p>

{literal}<pre>
brew update
brew tap caskroom/cask
brew install java
brew tap facebook/fb
brew install buck
</pre>
{/literal}

<p>
  Or, you can get the latest and greatest code and build it locally, for which you will need the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle Java Development Kit</a>:
</p>

{literal}<pre>
brew update
brew tap caskroom/cask
brew install java
brew tap facebook/fb
brew install --HEAD buck
</pre>
{/literal}

<h2>Build from Source</h2>

<h3>Prerequisites</h3>

<p>
  To manually build Buck, download and install the following prerequisites:
</p>

<ul>
  <li>
    <a href="https://developer.apple.com/xcode/features/">Command Line Tools</a>
  </li>
  <li>
    <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle Java
    Development Kit</a>
  </li>
  <li>
    <a href="http://ant.apache.org/">Apache Ant 1.9 (or newer)</a>
  </li>
  <li>
    <a href="https://www.python.org/downloads/">Python 2.7</a>
  </li>
  <li>
    <a href="http://git-scm.com/download">Git</a>
  </li>
  <li>
    <a href="https://facebook.github.io/watchman/docs/install.html">Watchman</a>
  </li>
</ul>

<blockquote>
  With watchman, Buck will use <a href="{ROOT}command/buckd.html">a daemon</a> which will prevent Buck from parsing all of your {call buck.concept_link}{param page: 'build_file' /}{param name: 'build files' /}{/call} every time and cache some other things as well. It is strongly recommended that you install Watchman.
</blockquote>

<p>
  You can use <a href="http://homebrew.sh">Homebrew</a> to install many of the prerequisites on a Mac.
</p>

{literal}<pre>
# Install Command Line tools first.
xcode-select --install
# Then....
brew update
brew cask install java
brew install ant python git watchman
</pre>{/literal}

<h3>Build</h3>

<p>
  Once you have the above tools installed, you can install Buck as follows:
</p>

{call buck.installationInstructions /}

<p>
  If everything worked correctly, you should see something like:
</p>

{literal}<pre>
buck build tool
usage:
  buck [options]
  buck command --help
  buck command [command-options]
available commands:
  audit       lists the inputs for the specified target
  build       builds the specified target
  cache       makes calls to the artifact cache
  clean       deletes any generated files
  fetch       downloads remote resources to your local machine
  install     builds and installs an application
  project     generates project configuration files for an IDE
  query       provides facilities to query information about the target nodes graph
  root        prints the absolute path to the root of the current buck project
  run         runs a target as a command
  server      query and control the http server
  targets     prints the list of buildable targets
  test        builds and runs the tests for the specified target
  uninstall   uninstalls an APK
options:
 --help         : Shows this screen and exits.
 --version (-V) : Show version number.
{/literal}</pre>

<p>
  Because you will likely be running <code>./bin/buck</code> often, you should add it to your path
  so that you can simply run <code>buck</code> from the command line.
</p>

<span><block class="linux windows android" /></span>

<h2>Build from Source</h2>

<h3>Prerequisites</h3>

<p>
To manually build Buck, download and install the following prerequisites:
</p>

<ul>
  <li>
    <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle Java
    Development Kit</a>
  </li>
  <li>
    <a href="http://ant.apache.org/">Apache Ant 1.9 (or newer)</a>
  </li>
  <li>
    <a href="https://www.python.org/downloads/">Python 2.7</a>
  </li>
  <li>
    <a href="http://git-scm.com/download">Git</a>
  </li>
  <li>
    <a href="https://facebook.github.io/watchman/docs/install.html">Watchman</a>
  </li>
</ul>

<blockquote>
  With watchman, Buck will use <a href="{ROOT}command/buckd.html">a daemon</a> which will prevent Buck from parsing all of your {call buck.concept_link}{param page: 'build_file' /}{param name: 'build files' /}{/call} every time and cache some other things as well. It is strongly recommended that you install Watchman.
</blockquote>

<span><block class="windows android" /></span>

<p>
  You can use <a href="https://chocolatey.org/">Chocolatey</a> to install many of the prerequisites on Windows.
</p>

{literal}<pre>
choco install jdk8 ant python git
# install watchman as stated in the watchman prerequisite link above
</pre>{/literal}

<span><block class="linux android" /></span>

<p>
  You can use your distro's package manager (e.g., <code>apt</code>) to install many of the prerequisites on Linux. For example on Ubuntu 16.04, you can run the following:
</p>

{literal}<pre>
apt-get install default-jdk ant python git
# install watchman as stated in the watchman prerequisite link above
</pre>{/literal}

<span><block class="windows linux android" /></span>

<h3>Environment Variables</h3>

<p>
  You will need to tell Buck where to find our SDK nd NDK.  Buck will look at the value of the <code>ANDROID_HOME</code> environment variable to locate the SDK files on your system.  Buck will look at <code>ANDROID_NDK</code> to find a specific version of the NDK, and <code>ANDROID_NDK_REPOSITORY</code> to find an appropriate NDK from a directory containing multiple NDK versions.
</p>

<h3>Build</h3>

<p>
  Once you have the above tools installed, you can install Buck as follows:
</p>

<span><block class="windows android" /></span>
{call buck.installationInstructions}
  {param isWindows: true /}
{/call}

<span><block class="linux android" /></span>
{call buck.installationInstructions /}

<span><block class="windows linux android" /></span>

<p>
  If everything worked correctly, you should see something like:
</p>

{literal}<pre>
buck build tool
usage:
  buck [options]
  buck command --help
  buck command [command-options]
available commands:
  audit       lists the inputs for the specified target
  build       builds the specified target
  cache       makes calls to the artifact cache
  clean       deletes any generated files
  fetch       downloads remote resources to your local machine
  install     builds and installs an application
  project     generates project configuration files for an IDE
  query       provides facilities to query information about the target nodes graph
  root        prints the absolute path to the root of the current buck project
  run         runs a target as a command
  server      query and control the http server
  targets     prints the list of buildable targets
  test        builds and runs the tests for the specified target
  uninstall   uninstalls an APK
options:
 --help         : Shows this screen and exits.
 --version (-V) : Show version number.
</pre>{/literal}

<span><block class="windows android" /></span>
<p>
  Because you will likely be running <code>.\bin\buck</code> often, you should add it to your path
  so that you can simply run <code>buck</code> from the command line.
</p>

<span><block class="linux android" /></span>
<p>
  Because you will likely be running <code>./bin/buck</code> often, you should add it to your path
  so that you can simply run <code>buck</code> from the command line.
</p>

<span><block class="linux mac android" /></span>

<h2>Trying Buck</h2>

<p>
  Now that Buck is installed, it is time use Buck in a sample project.
</p>

<h3>Path Setup</h3>

<p>
  Add Buck to your <code>$PATH</code> and set up <code><a href="{ROOT}command/buckd.html"></code>buckd</code></a>:
</p>

{literal}
<pre>
sudo ln -s ${lb}PWD{rb}/bin/buck /usr/bin/buck
sudo ln -s ${lb}PWD{rb}/bin/buckd /usr/bin/buckd
</pre>
{/literal}


<h3>Create Project</h3>

<p>
  We are going to build a sample Android application. We should start our project in an empty directory, so create a new one and navigate to it:
</p>

{literal}<pre>
mkdir -p ~/my-first-buck-project/
cd ~/my-first-buck-project/
</pre>{/literal}

<p>
<blockquote>
  <strong>Note: the following instructions will now assume that all commands are run from your <code>~/my-first-buck-project</code> directory.</strong>
</blockquote>
</p>

<h3>Compile Your Code</h3>

<p>
  Android applications are typically written in Java, so the first thing we will do is configure Buck to compile Java code against the Android API. To do so, Buck needs to know where your Android SDK is. Assuming that your Android SDK is installed in <code>~/android-sdk-mac</code>, run the following command to set a <code>ANDROID_NDK</code> environment variable that tells Buck where to find your Android SDK:
</p>

{literal}<pre>
export ANDROID_NDK=$HOME/android-sdk-mac
</pre>{/literal}

<p>
  Now that Buck can locate your Android SDK, it is time to compile some Java code. First, we create a simple <code>Activity</code> at <code>java/com/example/activity/MyFirstActivity.java</code>:
</p>

{literal}<pre>
mkdir -p java/com/example/activity/
echo "package com.example.activity;

import android.app.Activity;
import android.os.Bundle;

public class MyFirstActivity extends Activity {

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
  }
}" > java/com/example/activity/MyFirstActivity.java
</pre>{/literal}

<p>
  Now we need a build file that defines a build rule to compile this Java code, so we create an <code><a href="rule/android_library.html">android_library()</a></code> rule in <code>java/com/example/activity/BUCK</code>:
</p>

{literal}<pre>
echo "android_library(
  name = 'activity',
  srcs = glob(['*.java']),
  visibility = [ 'PUBLIC' ],
)

project_config(
  src_target = ':activity',
)" > java/com/example/activity/BUCK
</pre>{/literal}

<p>
  Now we can compile our Java code using Buck:
</p>

<pre>buck build{sp}//java/com/example/activity:activity</pre>

<p>
<blockquote>
  Buck generates its output in the <code>buck-out</code> directory, so this is a good time to specify <code>buck-out</code> as something that should be ignored by your version control system.
</blockquote>
</p>

<h3>Package Resources</h3>

<p>
  Android applications frequently contain resources, such as strings and images. For this example, we will create a trivial Android resource bundle that contains a single string:
</p>

{literal}<pre>
mkdir -p res/com/example/activity/res/values/
echo "&lt;?xml version='1.0' encoding='utf-8' ?>
&lt;resources>
  &lt;string name='app_name'>Hello World&lt;/string>
&lt;/resources>" > res/com/example/activity/res/values/strings.xml
</pre>{/literal}

<p>
  Buck needs a way to reference this collection of resources, so we need to create a build file that defines an <code><a href="rule/android_resource.html">android_resource()</a></code> rule:
</p>

{literal}<pre>
echo "android_resource(
  name = 'res',
  res = 'res',
  package = 'com.example',
  visibility = [
    '//apps/myapp:',
  ],
)

project_config(
  src_target = ':res',
)" > res/com/example/activity/BUCK
</pre>{/literal}

<h3>Create a Keystore</h3>

<p>
  In practice, you will want to be able to test your Android app on a physical Android device, which means that it needs to be signed. We will create app-specific information, such as the key and manifest, in its own directory to keep things tidy:
</p>

<pre>mkdir -p apps/myapp/</pre>

<p>
  To keep things simple, we will create a self-signed certificate for debugging.
</p>

<p>
<blockquote>
  Unfortunately, this is not a one-liner because there is a number of prompts from the <code>keytool</code> command.
</blockquote>
</p>

{literal}<pre>
keytool -genkey -keystore apps/myapp/debug.keystore -alias my_alias \
    -keyalg RSA -keysize 2048 -validity 10000
</pre>{/literal}

<p>
  When prompted for a keystore password, just use <code>android</code> (and then type it again to confirm it), and hit <code>Enter</code> to accept the default values for name, organizational unit, etc.
</p>

<p>
  Then create a <code>.properties</code> file that stores all of this information:
</p>

{literal}<pre>
echo "key.alias=my_alias
key.store.password=android
key.alias.password=android" > apps/myapp/debug.keystore.properties
</pre>{/literal}

<h3>Build an APK</h3>

<p>
An Android application needs a manifest named <code>AndroidManifest.xml</code>, so we must create such a file:
</p>

{literal}<pre>
echo "&lt;?xml version='1.0' encoding='utf-8'?>
&lt;manifest xmlns:android='http://schemas.android.com/apk/res/android'
          package='com.example'
          >

  &lt;application
      android:label='@string/app_name'
      android:hardwareAccelerated='true'>
    &lt;activity android:name='.activity.MyFirstActivity'>
      &lt;intent-filter>
        &lt;action android:name='android.intent.action.MAIN' />
        &lt;category android:name='android.intent.category.LAUNCHER' />
      &lt;/intent-filter>
    &lt;/activity>
  &lt;/application>

&lt;/manifest>" > apps/myapp/AndroidManifest.xml
</pre>{/literal}

<p>
  Now we define an {call buck.android_binary /} and {call buck.keystore /} rule in our build file:
</p>

{literal}<pre>
echo "android_binary(
  name = 'app',
  manifest = 'AndroidManifest.xml',
  target = 'Google Inc.:Google APIs:16',
  keystore = ':debug_keystore',
  deps = [
    '//java/com/example/activity:activity',
    '//res/com/example/activity:res',
  ],
)

keystore(
  name = 'debug_keystore',
  store = 'debug.keystore',
  properties = 'debug.keystore.properties',
)

project_config(
  src_target = ':app',
)" > apps/myapp/BUCK
</pre>{/literal}

<p>
  Building an <code>android_binary()</code> rule will produce an APK:
</p>

<pre>buck build{sp}//apps/myapp:app</pre>

<p>
  Alternatively, if you have an Android device connected to your computer, you can build and install the APK in one step:
</p>

<pre>buck install{sp}//apps/myapp:app</pre>

<h3>Create an Alias</h3>

<p>
  Typing <code>buck build{sp}//apps/myapp:app</code> every time you want to rebuild your APK can be tedious. Fortunately, Buck makes it possible to define an <em>alias</em> for a build target. An alias can always be used in place of a build target when using Buck's command-line interface.
</p>

<p>
  Aliases must be defined in a config file in the root of the project:
</p>

{literal}<pre>
echo "[alias]
    app = //apps/myapp:app" > .buckconfig
</pre>{/literal}

<p>
  With this alias in place, the command to build and install the APK is much shorter and easier to remember:
</p>

<pre>buck install app</pre>

<h3>Create an IntelliJ Project</h3>

<p>
  You likely want to develop your Android app using an IDE. Fortunately, Buck can generate an IntelliJ project from the <code><a href="rule/project_config.html">project_config()</code></a> rules you defined in your build files.
</p>

<p>
  In order to ensure that IntelliJ recognizes where your Java folders are, you need to specify the following in your <code>.buckconfig</code> file:
</p>

{literal}<pre>
echo "[java]
    src_roots = /java/" >> .buckconfig
</pre>{/literal}

<p>
  Now you can create the IntelliJ project by running the following command:
</p>

<pre>buck project</pre>

<p>
  Note that you will likely want to exclude these generated files from version control, so add the following to your <code>.gitignore</code> file (or <code>.hgignore</code> if you are using Mercurial) along with the files generated by <code>buckd</code>:
</p>

{literal}<pre>
echo "/.buckd
/buck-out
*.iml
/.idea/compiler.xml
/.idea/libraries/*.xml
/.idea/modules.xml
/.idea/runConfigurations/Debug_Buck_test.xml" > .gitignore
</pre>{/literal}

<p>
  Now you can build your Android application from either IntelliJ or the command line.
</p>

</div> // close overview

{literal}
<script>
// Convert <div>...<span><block /></span>...</div>
// Into <div>...<block />...</div>
var blocks = document.getElementsByTagName('block');
for (var i = 0; i < blocks.length; ++i) {
  var block = blocks[i];
  var span = blocks[i].parentNode;
  var container = span.parentNode;
  container.insertBefore(block, span);
  container.removeChild(span);
}
// Convert <div>...<block />content<block />...</div>
// Into <div>...<block>content</block><block />...</div>
blocks = document.getElementsByTagName('block');
for (var i = 0; i < blocks.length; ++i) {
  var block = blocks[i];
  while (block.nextSibling && block.nextSibling.tagName !== 'BLOCK') {
    block.appendChild(block.nextSibling);
  }
}
function display(type, value) {
  var container = document.getElementsByTagName('block')[0].parentNode;
  container.className = 'display-' + type + '-' + value + ' ' +
    container.className.replace(RegExp('display-' + type + '-[a-z]+ ?'), '');
}

// If we are coming to the page with a hash in it (i.e. from a search, for example), try to get
// us as close as possible to the correct platform and dev os using the hashtag and block walk up.
var foundHash = false;
if (window.location.hash !== '' && window.location.hash !== 'content') { // content is default
  var hashLinks = document.querySelectorAll('a.hash-link');
  for (var i = 0; i < hashLinks.length && !foundHash; ++i) {
    if (hashLinks[i].hash === window.location.hash) {
      var parent = hashLinks[i].parentElement;
      while (parent) {
        if (parent.tagName === 'BLOCK') {
          var devOS = null;
          var targetPlatform = null;
          // Could be more than one target os and dev platform, but just choose some sort of order
          // of priority here.

          // Dev OS
          if (parent.className.indexOf('mac') > -1) {
            devOS = 'mac';
          } else if (parent.className.indexOf('linux') > -1) {
            devOS = 'linux';
          } else if (parent.className.indexOf('windows') > -1) {
            devOS = 'windows';
          } else {
            break; // assume we don't have anything.
          }

          // Target Platform
          if (parent.className.indexOf('ios') > -1) {
            targetPlatform = 'ios';
          } else if (parent.className.indexOf('android') > -1) {
            targetPlatform = 'android';
          } else {
            break; // assume we don't have anything.
          }
          // We would have broken out if both targetPlatform and devOS hadn't been filled.
          display('os', devOS);
          display('platform', targetPlatform);
          foundHash = true;
          break;
        }
        parent = parent.parentElement;
      }
    }
  }
}
// Do the default if there is no matching hash
if (!foundHash) {
  var isMac = navigator.platform.toLowerCase().indexOf('mac') !== -1;
  var isLinux = navigator.platform.toLowerCase().indexOf('linux') !== -1;
  display('os', isMac ? 'mac' : (isLinux ? 'linux' : 'windows'));
  display('platform', isMac ? 'ios' : 'android');
}
</script>
{/literal}

{call buck.footer}
  {param navid: 'setup_getting_started' /}
{/call}

{/template}
