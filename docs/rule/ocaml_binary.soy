{namespace ocaml_binary}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'ocaml_binary()' /}
    {param navid: 'rule_ocaml_binary' /}
    {param prettify: true /}
    {param description}
      A ocaml_binary() rule builds a native OCaml executable.
    {/param}
    {param content}

{call buck.rule}
{param status: 'UNFROZEN' /}
{param overview}
<p>
  A ocaml_binary() rule builds both native and bytecode executables from the supplied set of OCaml and C source files
  and dependencies.
</p>
<p>
  {call ocaml_common.supported_language_version /}
</p>
{/param}

{param args}

{call buck.arg}
  {param name: 'name' /}
  {param desc}
  The name of the rule.
  {/param}
{/call}

{call ocaml_common.srcs_arg /}

{call ocaml_common.deps_arg /}

{call ocaml_common.compiler_flags_arg /}

{/param} // close args

{param examples}

{call ocaml_common.more_examples /}

{literal}<pre class="prettyprint lang-py">
ocaml_binary(
  name='greet',
  srcs=[
    'main.ml',
    'lex.mll',
    'parser.mly',
    'hashtable.c',
  ],
  deps=[
    ':greeting',
    ':bridge',
  ],
)

ocaml_library(
  name='greeting',
  srcs=[
    'greeting.ml',
  ],
  deps=[
    ':join',
  ],
)

ocaml_library(
  name='join',
  srcs=[
    'join.ml',
  ],
)

cxx_library(
  name='bridge',
  srcs=[
    'bridge.c',
  ],
)
</pre>{/literal}
{/param}

{/call} // close buck.rule

    {/param}
  {/call}
{/template}
