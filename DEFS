# This is a quick hack to make it so that all Java rules build using Java 7.
# TODO(mbolin): Find a less hacky way to do this, likely something in .buckconfig.

original_java_library = java_library
def java_library(
    name,
    source='7',
    target='7',
    **kwargs
    ):
  original_java_library(
    name,
    source=source,
    target=target,
    **kwargs
    )

original_java_test = java_test
def java_test(
    name,
    source='7',
    target='7',
    vm_args=[],
    **kwargs
    ):
  original_java_test(
    name,
    source=source,
    target=target,
    vm_args=[
      # Add -XX:-UseSplitVerifier by default to work around:
      # http://arihantwin.blogspot.com/2012/08/getting-error-illegal-local-variable.html
      '-XX:-UseSplitVerifier',

      # Add -Dsun.zip.disableMemoryMapping=true to work around a JDK issue
      # related to modifying JAR/ZIP files that have been loaded into memory:
      #
      # http://bugs.sun.com/view_bug.do?bug_id=7129299
      #
      # This has been observed to cause a problem in integration tests such as
      # CachedTestIntegrationTest where `buck build //:test` is run repeatedly
      # such that a corresponding `test.jar` file is overwritten several times.
      # The CompiledClassFileFinder in JavaTestRule creates a java.util.zip.ZipFile
      # to enumerate the zip entries in order to find the set of .class files
      # in `test.jar`. This interleaving of reads and writes appears to match
      # the conditions to trigger the issue reported on bugs.sun.com.
      #
      # Currently, we do not set this flag in bin/buck_common, as Buck does not
      # normally modify the contents of buck-out after they are loaded into
      # memory. However, we may need to use this flag when running buckd where
      # references to zip files may be long-lived.
      #
      # Finally, note that when you specify this flag,
      # `System.getProperty("sun.zip.disableMemoryMapping")` will return `null`
      # even though you have specified the flag correctly. Apparently sun.misc.VM
      # (http://www.docjar.com/html/api/sun/misc/VM.java.html) saves the property
      # internally, but removes it from the set of system properties that are
      # publicly accessible.
      '-Dsun.zip.disableMemoryMapping=true',
    ] + vm_args,
    **kwargs
  )


def buck_java_test(
    source_under_test,
    deps,
    resources=None,
    util_deps=None):
  """
  Partitions the .java files in this directory into three groups:
  test utility classes, unit tests, and integration tests. This will
  generate at most three build rules (where NAME is the name of the
  directory that uses this macro):

  :NAME
  :NAME-util
  :NAME-integration-tests

  This simplifies things so that most BUCK files under //test/... can
  be reduced to a single macro. This also ensures that unit tests and
  integration tests can be run independently using labels.
  """
  name = get_base_path().split('/')[-1]

  unit_tests = []
  integration_tests = []
  utils = []
  for src in glob(['*.java']):
    if src.endswith('IntegrationTest.java'):
      integration_tests.append(src)
    elif src.endswith('Test.java'):
      unit_tests.append(src)
    else:
      utils.append(src)

  has_utils = len(utils) > 0
  utils_target = name + '-util'
  if has_utils:
    java_library(
      name = utils_target,
      srcs = utils,
      deps = util_deps or deps,
      visibility = [
        '//test/...', 
      ],
    )

  test_deps = deps[:]
  if has_utils:
    test_deps.append(':' + utils_target)

  if len(unit_tests) > 0:
    java_test(
      name = name,
      srcs = unit_tests,
      resources = resources,
      labels = [
        'unit',
      ],
      source_under_test = source_under_test,
      deps = test_deps,
    )

  if len(integration_tests) > 0:
    java_test(
      name = name + '-integration-tests',
      srcs = integration_tests,
      resources = resources,
      labels = [
        'integration',
      ],
      source_under_test = source_under_test,
      deps = test_deps,
    )
