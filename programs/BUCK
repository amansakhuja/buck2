load("@buck_bazel_skylib//lib:dicts.bzl", "dicts")
load(
    "//tools/build_rules:module_rules.bzl",
    "convert_modules_to_external_resources",
    "convert_modules_to_resources",
)
load("//tools/build_rules:python_rules.bzl", "interpreter_override_args")
load(":defs.bzl", "get_gen_buck_info_command", "python_resources_with_signature")

python_library(
    name = "subprocutils",
    srcs = [
        "subprocutils.py",
    ],
    visibility = [
        "//programs/...",
        "//scripts/...",
    ],
)

python_library(
    name = "buck_version",
    srcs = [
        "buck_version.py",
        "buck_version_mercurial.py",
    ],
    deps = [
        ":subprocutils",
    ],
)

python_library(
    name = "java_version",
    srcs = [
        "java_version.py",
    ],
)

python_binary(
    name = "gen_buck_info",
    main = "gen_buck_info.py",
    visibility = ["PUBLIC"],
    deps = [
        ":buck_version",
        ":java_version",
    ],
)

python_binary(
    name = "buck_package_info",
    main = "buck_package_info.py",
)

# This is bit weird.  This rule isn't idempotent, since it calls out
# to git commands to find repo information -- and this stuff clearly
# isn't enumerated in the inputs of arguments for this rule (which
# would normally add it to the rule key).  However, since we're just
# trying to generate the Buck version UID, this should work, since the
# in-repo Buck we're using to build this already implicitly adds the
# same Buck version UID to it's rule key.  But still... gross.
#
# For releases, both OSS and not, we accept a number of configuration (-c) options
# and we build in a clean repo anyways, so in those cases it /is/ idempotent.
#
# One downside of this: If you don't rebuild the buck you're building with in between
# runs (say, by using ant), this rule won't re-run, and the --version of your .pex will
# be wrong. The upside of that is that this script can be slow, and for most cases
# skipping that leads to a better developer experience. Unfortunately if one makes
# a lot of changes, then rebuilds buck and tries to run that pex, the old buckd
# won't restart because the versions match.
genrule(
    name = "gen_buck_version_info",
    out = "buck_version_info.json",
    cmd = get_gen_buck_info_command(":gen_buck_info"),
)

build_type = read_config("build", "type", "LOCAL_PEX")

genrule(
    name = "gen_build_type_info",
    out = "build_type_info.txt",
    bash = "echo {0} > $OUT".format(build_type),
    cmd_exe = "echo {0}> %OUT%".format(build_type),
)

# The name of the package info file. This contains information read by the
# wrapper to determine the version of buck resources in the pex (to determine
# if it can reuse the resources on disk or reuse the daemon).
BUCK_PACKAGE_INFO_NAME = "buck_package_info"

export_file(
    name = "buck_wrapper_info",
    src = "buck_wrapper_info.txt",
)

# Resources used by buck. This includes the buck java code itself and things used by it (e.g. dx,
# logging config, etc). These will be packaged in the pex and extracted to the resources dir to be
# accessible.
RAW_RESOURCES = {
    "android_agent_path": "//assets/android:agent.apk",
    "bootstrapper_jar": "//src/com/facebook/buck/cli/bootstrapper:bootstrapper",
    "buck_build_type_info": ":gen_build_type_info",
    "buck_server": "//src/com/facebook/buck/cli:main",
    # Container lib to allow wrapper to detect features about a buck.pex
    #
    # Format (RFC 5234) that is easy to use in shell scripts
    #   buck_wrapper_info = *(flag-clause LF) [LF]
    #   flag-clause = "~" flag "~" flag_opts
    #   flag = 1*(ALPHA / DIGIT / "_")
    #   flag-opts = *(vchar-tilde)
    #   vchar-tilde = %x21-7D ; VCHAR - "~"
    "buck_wrapper_info": ":buck_wrapper_info",
    "buckfilesystem_jar": "//src/com/facebook/buck/core/filesystems:filesystems",
    "dx": "//third-party/java/dx:etc_dx",
    "external_actions": "//src/com/facebook/buck/external/main:external_actions_bin",
    "jacoco_agent_jar": "//third-party/java/jacoco:agent",
    "legacy_fix_script": "//programs/fixes/source_only_abi:fix",
    # The name of this resource is important, since it needs to have this filename in the PEX.
    "libjcocoa.dylib": "//third-party/java/ObjCBridge:libjcocoa.dylib",
    "logging_config_file": "//config:logging.properties",
    "native_exopackage_fake_path": "//assets/android:native-exopackage-fakes.apk",
    "path_to_isolated_trampoline": "//src/com/facebook/buck/rules/modern/builders:trampoline",
    "path_to_pathlib_py": "//third-party/py/pathlib:pathlib.py",
    "path_to_pywatchman": "//third-party/py/pywatchman:pywatchman-archive",
    "path_to_sh_binary_template": "//src/com/facebook/buck/shell:sh_binary_template",
    "path_to_six_py": "//third-party/py/six:six.py",
    "path_to_typing": "//third-party/py:typing-archive",
    "report_generator_jar": "//src/com/facebook/buck/jvm/java/coverage:report-generator",
    "testrunner_classes": "//src/com/facebook/buck/testrunner:testrunner-bin-fixed",
}

BUCK_MODULES = {
    "alias": "//src/com/facebook/buck/features/alias:alias",
    "d": "//src/com/facebook/buck/features/d:d",
    "dotnet": "//src/com/facebook/buck/features/dotnet:dotnet",
    "filebundler": "//src/com/facebook/buck/features/filebundler:filebundler",
    "filegroup": "//src/com/facebook/buck/features/filegroup:filegroup",
    "go": "//src/com/facebook/buck/features/go:go",
    "gwt": "//src/com/facebook/buck/features/gwt:gwt",
    "halide": "//src/com/facebook/buck/features/halide:halide",
    "haskell": "//src/com/facebook/buck/features/haskell:haskell",
    "intellij": "//src/com/facebook/buck/features/project/intellij:intellij",
    "js": "//src/com/facebook/buck/features/js:js",
    "lua": "//src/com/facebook/buck/features/lua:lua",
    "ocaml": "//src/com/facebook/buck/features/ocaml:ocaml",
    "python": "//src/com/facebook/buck/features/python:module",
    "rust": "//src/com/facebook/buck/features/rust:rust",
    "supermodule": "//src/com/facebook/buck/features/supermodule:supermodule",
    "xcode": "//src/com/facebook/buck/features/apple/project:project",
    "ziprules": "//src/com/facebook/buck/features/zip/rules:rules",
}

BUCK_MODULES_WITH_RESOURCES = [
    "python",
]

BUCK_RESOURCES = dicts.add(
    RAW_RESOURCES,
    convert_modules_to_resources(BUCK_MODULES),
    convert_modules_to_external_resources(BUCK_MODULES, BUCK_MODULES_WITH_RESOURCES),
)

# This computes a signature for all the resources and we then embed that in the
# pex. This signature is used for determining if the unpacked resources can be
# reused and if the daemon can be reused.
#
# This could potentially be limited to be a signature just over the resources
# that we unpack and make available to the daemon, but that seems like it would
# add complexity and fragility for basically no benefit (the vast majority of
# buck changes are going to change daemon resources).
python_resources_with_signature(
    name = "buck_resources",
    resources = BUCK_RESOURCES,
    signature_name = "buck_resources_signature",
)

python_library(
    name = "bucklib",
    srcs = [
        "buck_logging.py",
        "buck_package.py",
        "buck_project.py",
        "buck_repo.py",
        "buck_tool.py",
        "file_locks.py",
        "java_lookup.py",
        "timing.py",
        "tracing.py",
    ],
    resources = [
        # DO NOT ADD THINGS HERE. ANY RESOURCES MUST BE PART OF THE SIGNATURE
        # COMPUTED ABOVE.
    ],
    deps = [
        ":buck_resources",
        ":buck_version",
        ":subprocutils",
        "//third-party/nailgun:ng",
    ],
)

genrule(
    name = "gen_buck_package_info",
    out = "buck_package_info",
    cmd = "$(exe :buck_package_info) $(location :gen_buck_version_info) $(location :buck_resources_signature) > $OUT",
)

# Simple container libs to hold the buck package info. This info is used by the
# python wrapper to determine the version of buck resources.
#
# This should be the only resource not contained in the main resources above.
python_library(
    name = "buck_package_info_lib",
    srcs = [],
    # Right now, the package info is just the version info
    resources = {BUCK_PACKAGE_INFO_NAME: ":gen_buck_package_info"},
)

python_library(
    name = "buck_sosreport",
    srcs = [
        "buck_sosreport.py",
    ],
)

python_binary(
    name = "buck",
    build_args = interpreter_override_args(),
    main = "buck.py",
    visibility = [
        "//buck_e2e/...",
        "//scripts/...",
        "//test/...",
        "//tools/...",
    ],
    deps = [
        ":buck_package_info_lib",
        ":buck_sosreport",
        ":bucklib",
        ":java_version",
        ":subprocutils",
    ],
)

python_test(
    name = "test",
    srcs = glob(["test_*.py"]),
    deps = [
        ":buck_sosreport",
        ":bucklib",
        ":subprocutils",
    ],
)
